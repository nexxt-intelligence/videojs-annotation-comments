{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "node_modules/es6-object-assign/index.js",
    "node_modules/handlebars/lib/handlebars.runtime.js",
    "node_modules/handlebars/lib/handlebars/base.js",
    "node_modules/handlebars/lib/handlebars/decorators.js",
    "node_modules/handlebars/lib/handlebars/decorators/inline.js",
    "node_modules/handlebars/lib/handlebars/exception.js",
    "node_modules/handlebars/lib/handlebars/helpers.js",
    "node_modules/handlebars/lib/handlebars/helpers/block-helper-missing.js",
    "node_modules/handlebars/dist/cjs/handlebars/helpers/node_modules/handlebars/lib/handlebars/helpers/each.js",
    "node_modules/handlebars/lib/handlebars/helpers/helper-missing.js",
    "node_modules/handlebars/lib/handlebars/helpers/if.js",
    "node_modules/handlebars/lib/handlebars/helpers/log.js",
    "node_modules/handlebars/lib/handlebars/helpers/lookup.js",
    "node_modules/handlebars/lib/handlebars/helpers/with.js",
    "node_modules/handlebars/lib/handlebars/internal/create-new-lookup-object.js",
    "node_modules/handlebars/lib/handlebars/internal/proto-access.js",
    "node_modules/handlebars/lib/handlebars/internal/wrapHelper.js",
    "node_modules/handlebars/lib/handlebars/logger.js",
    "node_modules/handlebars/dist/cjs/handlebars/node_modules/handlebars/lib/handlebars/no-conflict.js",
    "node_modules/handlebars/lib/handlebars/runtime.js",
    "node_modules/handlebars/lib/handlebars/safe-string.js",
    "node_modules/handlebars/lib/handlebars/utils.js",
    "node_modules/ie-array-find-polyfill/index.js",
    "node_modules/mitt/dist/mitt.js",
    "node_modules/moment/moment.js",
    "node_modules/underscore/underscore.js",
    "src/js/annotation_comments.js",
    "src/js/compiled/templates.js",
    "src/js/components/annotation.js",
    "src/js/components/annotation_state.js",
    "src/js/components/comment.js",
    "src/js/components/comment_list.js",
    "src/js/components/controls.js",
    "src/js/components/draggable_marker.js",
    "src/js/components/marker.js",
    "src/js/components/player_button.js",
    "src/js/components/selectable_shape.js",
    "src/js/components/shape.js",
    "src/js/index.js",
    "src/js/lib/event_dispatcher.js",
    "src/js/lib/logger.js",
    "src/js/lib/player_component.js",
    "src/js/lib/player_ui_component.js",
    "src/js/lib/polyfills.js",
    "src/js/lib/utils.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "videojs-annotation-comments.js",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "/**\n * Code refactored from Mozilla Developer Network:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n */\n\n'use strict';\n\nfunction assign(target, firstSource) {\n  if (target === undefined || target === null) {\n    throw new TypeError('Cannot convert first argument to object');\n  }\n\n  var to = Object(target);\n  for (var i = 1; i < arguments.length; i++) {\n    var nextSource = arguments[i];\n    if (nextSource === undefined || nextSource === null) {\n      continue;\n    }\n\n    var keysArray = Object.keys(Object(nextSource));\n    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n      var nextKey = keysArray[nextIndex];\n      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n      if (desc !== undefined && desc.enumerable) {\n        to[nextKey] = nextSource[nextKey];\n      }\n    }\n  }\n  return to;\n}\n\nfunction polyfill() {\n  if (!Object.assign) {\n    Object.defineProperty(Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: assign\n    });\n  }\n}\n\nmodule.exports = {\n  assign: assign,\n  polyfill: polyfill\n};\n",
    "import * as base from './handlebars/base';\n\n// Each of these augment the Handlebars object. No need to setup here.\n// (This is done to easily share code between commonjs and browse envs)\nimport SafeString from './handlebars/safe-string';\nimport Exception from './handlebars/exception';\nimport * as Utils from './handlebars/utils';\nimport * as runtime from './handlebars/runtime';\n\nimport noConflict from './handlebars/no-conflict';\n\n// For compatibility and usage outside of module systems, make the Handlebars object a namespace\nfunction create() {\n  let hb = new base.HandlebarsEnvironment();\n\n  Utils.extend(hb, base);\n  hb.SafeString = SafeString;\n  hb.Exception = Exception;\n  hb.Utils = Utils;\n  hb.escapeExpression = Utils.escapeExpression;\n\n  hb.VM = runtime;\n  hb.template = function(spec) {\n    return runtime.template(spec, hb);\n  };\n\n  return hb;\n}\n\nlet inst = create();\ninst.create = create;\n\nnoConflict(inst);\n\ninst['default'] = inst;\n\nexport default inst;\n",
    "import { createFrame, extend, toString } from './utils';\nimport Exception from './exception';\nimport { registerDefaultHelpers } from './helpers';\nimport { registerDefaultDecorators } from './decorators';\nimport logger from './logger';\nimport { resetLoggedProperties } from './internal/proto-access';\n\nexport const VERSION = '4.7.6';\nexport const COMPILER_REVISION = 8;\nexport const LAST_COMPATIBLE_COMPILER_REVISION = 7;\n\nexport const REVISION_CHANGES = {\n  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it\n  2: '== 1.0.0-rc.3',\n  3: '== 1.0.0-rc.4',\n  4: '== 1.x.x',\n  5: '== 2.0.0-alpha.x',\n  6: '>= 2.0.0-beta.1',\n  7: '>= 4.0.0 <4.3.0',\n  8: '>= 4.3.0'\n};\n\nconst objectType = '[object Object]';\n\nexport function HandlebarsEnvironment(helpers, partials, decorators) {\n  this.helpers = helpers || {};\n  this.partials = partials || {};\n  this.decorators = decorators || {};\n\n  registerDefaultHelpers(this);\n  registerDefaultDecorators(this);\n}\n\nHandlebarsEnvironment.prototype = {\n  constructor: HandlebarsEnvironment,\n\n  logger: logger,\n  log: logger.log,\n\n  registerHelper: function(name, fn) {\n    if (toString.call(name) === objectType) {\n      if (fn) {\n        throw new Exception('Arg not supported with multiple helpers');\n      }\n      extend(this.helpers, name);\n    } else {\n      this.helpers[name] = fn;\n    }\n  },\n  unregisterHelper: function(name) {\n    delete this.helpers[name];\n  },\n\n  registerPartial: function(name, partial) {\n    if (toString.call(name) === objectType) {\n      extend(this.partials, name);\n    } else {\n      if (typeof partial === 'undefined') {\n        throw new Exception(\n          `Attempting to register a partial called \"${name}\" as undefined`\n        );\n      }\n      this.partials[name] = partial;\n    }\n  },\n  unregisterPartial: function(name) {\n    delete this.partials[name];\n  },\n\n  registerDecorator: function(name, fn) {\n    if (toString.call(name) === objectType) {\n      if (fn) {\n        throw new Exception('Arg not supported with multiple decorators');\n      }\n      extend(this.decorators, name);\n    } else {\n      this.decorators[name] = fn;\n    }\n  },\n  unregisterDecorator: function(name) {\n    delete this.decorators[name];\n  },\n  /**\n   * Reset the memory of illegal property accesses that have already been logged.\n   * @deprecated should only be used in handlebars test-cases\n   */\n  resetLoggedPropertyAccesses() {\n    resetLoggedProperties();\n  }\n};\n\nexport let log = logger.log;\n\nexport { createFrame, logger };\n",
    "import registerInline from './decorators/inline';\n\nexport function registerDefaultDecorators(instance) {\n  registerInline(instance);\n}\n",
    "import { extend } from '../utils';\n\nexport default function(instance) {\n  instance.registerDecorator('inline', function(fn, props, container, options) {\n    let ret = fn;\n    if (!props.partials) {\n      props.partials = {};\n      ret = function(context, options) {\n        // Create a new partials stack frame prior to exec.\n        let original = container.partials;\n        container.partials = extend({}, original, props.partials);\n        let ret = fn(context, options);\n        container.partials = original;\n        return ret;\n      };\n    }\n\n    props.partials[options.args[0]] = options.fn;\n\n    return ret;\n  });\n}\n",
    "const errorProps = [\n  'description',\n  'fileName',\n  'lineNumber',\n  'endLineNumber',\n  'message',\n  'name',\n  'number',\n  'stack'\n];\n\nfunction Exception(message, node) {\n  let loc = node && node.loc,\n    line,\n    endLineNumber,\n    column,\n    endColumn;\n\n  if (loc) {\n    line = loc.start.line;\n    endLineNumber = loc.end.line;\n    column = loc.start.column;\n    endColumn = loc.end.column;\n\n    message += ' - ' + line + ':' + column;\n  }\n\n  let tmp = Error.prototype.constructor.call(this, message);\n\n  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.\n  for (let idx = 0; idx < errorProps.length; idx++) {\n    this[errorProps[idx]] = tmp[errorProps[idx]];\n  }\n\n  /* istanbul ignore else */\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, Exception);\n  }\n\n  try {\n    if (loc) {\n      this.lineNumber = line;\n      this.endLineNumber = endLineNumber;\n\n      // Work around issue under safari where we can't directly set the column value\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(this, 'column', {\n          value: column,\n          enumerable: true\n        });\n        Object.defineProperty(this, 'endColumn', {\n          value: endColumn,\n          enumerable: true\n        });\n      } else {\n        this.column = column;\n        this.endColumn = endColumn;\n      }\n    }\n  } catch (nop) {\n    /* Ignore if the browser is very particular */\n  }\n}\n\nException.prototype = new Error();\n\nexport default Exception;\n",
    "import registerBlockHelperMissing from './helpers/block-helper-missing';\nimport registerEach from './helpers/each';\nimport registerHelperMissing from './helpers/helper-missing';\nimport registerIf from './helpers/if';\nimport registerLog from './helpers/log';\nimport registerLookup from './helpers/lookup';\nimport registerWith from './helpers/with';\n\nexport function registerDefaultHelpers(instance) {\n  registerBlockHelperMissing(instance);\n  registerEach(instance);\n  registerHelperMissing(instance);\n  registerIf(instance);\n  registerLog(instance);\n  registerLookup(instance);\n  registerWith(instance);\n}\n\nexport function moveHelperToHooks(instance, helperName, keepHelper) {\n  if (instance.helpers[helperName]) {\n    instance.hooks[helperName] = instance.helpers[helperName];\n    if (!keepHelper) {\n      delete instance.helpers[helperName];\n    }\n  }\n}\n",
    "import { appendContextPath, createFrame, isArray } from '../utils';\n\nexport default function(instance) {\n  instance.registerHelper('blockHelperMissing', function(context, options) {\n    let inverse = options.inverse,\n      fn = options.fn;\n\n    if (context === true) {\n      return fn(this);\n    } else if (context === false || context == null) {\n      return inverse(this);\n    } else if (isArray(context)) {\n      if (context.length > 0) {\n        if (options.ids) {\n          options.ids = [options.name];\n        }\n\n        return instance.helpers.each(context, options);\n      } else {\n        return inverse(this);\n      }\n    } else {\n      if (options.data && options.ids) {\n        let data = createFrame(options.data);\n        data.contextPath = appendContextPath(\n          options.data.contextPath,\n          options.name\n        );\n        options = { data: data };\n      }\n\n      return fn(context, options);\n    }\n  });\n}\n",
    "import {\n  appendContextPath,\n  blockParams,\n  createFrame,\n  isArray,\n  isFunction\n} from '../utils';\nimport Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('each', function(context, options) {\n    if (!options) {\n      throw new Exception('Must pass iterator to #each');\n    }\n\n    let fn = options.fn,\n      inverse = options.inverse,\n      i = 0,\n      ret = '',\n      data,\n      contextPath;\n\n    if (options.data && options.ids) {\n      contextPath =\n        appendContextPath(options.data.contextPath, options.ids[0]) + '.';\n    }\n\n    if (isFunction(context)) {\n      context = context.call(this);\n    }\n\n    if (options.data) {\n      data = createFrame(options.data);\n    }\n\n    function execIteration(field, index, last) {\n      if (data) {\n        data.key = field;\n        data.index = index;\n        data.first = index === 0;\n        data.last = !!last;\n\n        if (contextPath) {\n          data.contextPath = contextPath + field;\n        }\n      }\n\n      ret =\n        ret +\n        fn(context[field], {\n          data: data,\n          blockParams: blockParams(\n            [context[field], field],\n            [contextPath + field, null]\n          )\n        });\n    }\n\n    if (context && typeof context === 'object') {\n      if (isArray(context)) {\n        for (let j = context.length; i < j; i++) {\n          if (i in context) {\n            execIteration(i, i, i === context.length - 1);\n          }\n        }\n      } else if (global.Symbol && context[global.Symbol.iterator]) {\n        const newContext = [];\n        const iterator = context[global.Symbol.iterator]();\n        for (let it = iterator.next(); !it.done; it = iterator.next()) {\n          newContext.push(it.value);\n        }\n        context = newContext;\n        for (let j = context.length; i < j; i++) {\n          execIteration(i, i, i === context.length - 1);\n        }\n      } else {\n        let priorKey;\n\n        Object.keys(context).forEach(key => {\n          // We're running the iterations one step out of sync so we can detect\n          // the last iteration without have to scan the object twice and create\n          // an itermediate keys array.\n          if (priorKey !== undefined) {\n            execIteration(priorKey, i - 1);\n          }\n          priorKey = key;\n          i++;\n        });\n        if (priorKey !== undefined) {\n          execIteration(priorKey, i - 1, true);\n        }\n      }\n    }\n\n    if (i === 0) {\n      ret = inverse(this);\n    }\n\n    return ret;\n  });\n}\n",
    "import Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('helperMissing', function(/* [args, ]options */) {\n    if (arguments.length === 1) {\n      // A missing field in a {{foo}} construct.\n      return undefined;\n    } else {\n      // Someone is actually trying to call something, blow up.\n      throw new Exception(\n        'Missing helper: \"' + arguments[arguments.length - 1].name + '\"'\n      );\n    }\n  });\n}\n",
    "import { isEmpty, isFunction } from '../utils';\nimport Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('if', function(conditional, options) {\n    if (arguments.length != 2) {\n      throw new Exception('#if requires exactly one argument');\n    }\n    if (isFunction(conditional)) {\n      conditional = conditional.call(this);\n    }\n\n    // Default behavior is to render the positive path if the value is truthy and not empty.\n    // The `includeZero` option may be set to treat the condtional as purely not empty based on the\n    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.\n    if ((!options.hash.includeZero && !conditional) || isEmpty(conditional)) {\n      return options.inverse(this);\n    } else {\n      return options.fn(this);\n    }\n  });\n\n  instance.registerHelper('unless', function(conditional, options) {\n    if (arguments.length != 2) {\n      throw new Exception('#unless requires exactly one argument');\n    }\n    return instance.helpers['if'].call(this, conditional, {\n      fn: options.inverse,\n      inverse: options.fn,\n      hash: options.hash\n    });\n  });\n}\n",
    "export default function(instance) {\n  instance.registerHelper('log', function(/* message, options */) {\n    let args = [undefined],\n      options = arguments[arguments.length - 1];\n    for (let i = 0; i < arguments.length - 1; i++) {\n      args.push(arguments[i]);\n    }\n\n    let level = 1;\n    if (options.hash.level != null) {\n      level = options.hash.level;\n    } else if (options.data && options.data.level != null) {\n      level = options.data.level;\n    }\n    args[0] = level;\n\n    instance.log(...args);\n  });\n}\n",
    "export default function(instance) {\n  instance.registerHelper('lookup', function(obj, field, options) {\n    if (!obj) {\n      // Note for 5.0: Change to \"obj == null\" in 5.0\n      return obj;\n    }\n    return options.lookupProperty(obj, field);\n  });\n}\n",
    "import {\n  appendContextPath,\n  blockParams,\n  createFrame,\n  isEmpty,\n  isFunction\n} from '../utils';\nimport Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('with', function(context, options) {\n    if (arguments.length != 2) {\n      throw new Exception('#with requires exactly one argument');\n    }\n    if (isFunction(context)) {\n      context = context.call(this);\n    }\n\n    let fn = options.fn;\n\n    if (!isEmpty(context)) {\n      let data = options.data;\n      if (options.data && options.ids) {\n        data = createFrame(options.data);\n        data.contextPath = appendContextPath(\n          options.data.contextPath,\n          options.ids[0]\n        );\n      }\n\n      return fn(context, {\n        data: data,\n        blockParams: blockParams([context], [data && data.contextPath])\n      });\n    } else {\n      return options.inverse(this);\n    }\n  });\n}\n",
    "import { extend } from '../utils';\n\n/**\n * Create a new object with \"null\"-prototype to avoid truthy results on prototype properties.\n * The resulting object can be used with \"object[property]\" to check if a property exists\n * @param {...object} sources a varargs parameter of source objects that will be merged\n * @returns {object}\n */\nexport function createNewLookupObject(...sources) {\n  return extend(Object.create(null), ...sources);\n}\n",
    "import { createNewLookupObject } from './create-new-lookup-object';\nimport * as logger from '../logger';\n\nconst loggedProperties = Object.create(null);\n\nexport function createProtoAccessControl(runtimeOptions) {\n  let defaultMethodWhiteList = Object.create(null);\n  defaultMethodWhiteList['constructor'] = false;\n  defaultMethodWhiteList['__defineGetter__'] = false;\n  defaultMethodWhiteList['__defineSetter__'] = false;\n  defaultMethodWhiteList['__lookupGetter__'] = false;\n\n  let defaultPropertyWhiteList = Object.create(null);\n  // eslint-disable-next-line no-proto\n  defaultPropertyWhiteList['__proto__'] = false;\n\n  return {\n    properties: {\n      whitelist: createNewLookupObject(\n        defaultPropertyWhiteList,\n        runtimeOptions.allowedProtoProperties\n      ),\n      defaultValue: runtimeOptions.allowProtoPropertiesByDefault\n    },\n    methods: {\n      whitelist: createNewLookupObject(\n        defaultMethodWhiteList,\n        runtimeOptions.allowedProtoMethods\n      ),\n      defaultValue: runtimeOptions.allowProtoMethodsByDefault\n    }\n  };\n}\n\nexport function resultIsAllowed(result, protoAccessControl, propertyName) {\n  if (typeof result === 'function') {\n    return checkWhiteList(protoAccessControl.methods, propertyName);\n  } else {\n    return checkWhiteList(protoAccessControl.properties, propertyName);\n  }\n}\n\nfunction checkWhiteList(protoAccessControlForType, propertyName) {\n  if (protoAccessControlForType.whitelist[propertyName] !== undefined) {\n    return protoAccessControlForType.whitelist[propertyName] === true;\n  }\n  if (protoAccessControlForType.defaultValue !== undefined) {\n    return protoAccessControlForType.defaultValue;\n  }\n  logUnexpecedPropertyAccessOnce(propertyName);\n  return false;\n}\n\nfunction logUnexpecedPropertyAccessOnce(propertyName) {\n  if (loggedProperties[propertyName] !== true) {\n    loggedProperties[propertyName] = true;\n    logger.log(\n      'error',\n      `Handlebars: Access has been denied to resolve the property \"${propertyName}\" because it is not an \"own property\" of its parent.\\n` +\n        `You can add a runtime option to disable the check or this warning:\\n` +\n        `See https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details`\n    );\n  }\n}\n\nexport function resetLoggedProperties() {\n  Object.keys(loggedProperties).forEach(propertyName => {\n    delete loggedProperties[propertyName];\n  });\n}\n",
    "export function wrapHelper(helper, transformOptionsFn) {\n  if (typeof helper !== 'function') {\n    // This should not happen, but apparently it does in https://github.com/wycats/handlebars.js/issues/1639\n    // We try to make the wrapper least-invasive by not wrapping it, if the helper is not a function.\n    return helper;\n  }\n  let wrapper = function(/* dynamic arguments */) {\n    const options = arguments[arguments.length - 1];\n    arguments[arguments.length - 1] = transformOptionsFn(options);\n    return helper.apply(this, arguments);\n  };\n  return wrapper;\n}\n",
    "import { indexOf } from './utils';\n\nlet logger = {\n  methodMap: ['debug', 'info', 'warn', 'error'],\n  level: 'info',\n\n  // Maps a given level value to the `methodMap` indexes above.\n  lookupLevel: function(level) {\n    if (typeof level === 'string') {\n      let levelMap = indexOf(logger.methodMap, level.toLowerCase());\n      if (levelMap >= 0) {\n        level = levelMap;\n      } else {\n        level = parseInt(level, 10);\n      }\n    }\n\n    return level;\n  },\n\n  // Can be overridden in the host environment\n  log: function(level, ...message) {\n    level = logger.lookupLevel(level);\n\n    if (\n      typeof console !== 'undefined' &&\n      logger.lookupLevel(logger.level) <= level\n    ) {\n      let method = logger.methodMap[level];\n      // eslint-disable-next-line no-console\n      if (!console[method]) {\n        method = 'log';\n      }\n      console[method](...message); // eslint-disable-line no-console\n    }\n  }\n};\n\nexport default logger;\n",
    "export default function(Handlebars) {\n  /* istanbul ignore next */\n  let root = typeof global !== 'undefined' ? global : window,\n    $Handlebars = root.Handlebars;\n  /* istanbul ignore next */\n  Handlebars.noConflict = function() {\n    if (root.Handlebars === Handlebars) {\n      root.Handlebars = $Handlebars;\n    }\n    return Handlebars;\n  };\n}\n",
    "import * as Utils from './utils';\nimport Exception from './exception';\nimport {\n  COMPILER_REVISION,\n  createFrame,\n  LAST_COMPATIBLE_COMPILER_REVISION,\n  REVISION_CHANGES\n} from './base';\nimport { moveHelperToHooks } from './helpers';\nimport { wrapHelper } from './internal/wrapHelper';\nimport {\n  createProtoAccessControl,\n  resultIsAllowed\n} from './internal/proto-access';\n\nexport function checkRevision(compilerInfo) {\n  const compilerRevision = (compilerInfo && compilerInfo[0]) || 1,\n    currentRevision = COMPILER_REVISION;\n\n  if (\n    compilerRevision >= LAST_COMPATIBLE_COMPILER_REVISION &&\n    compilerRevision <= COMPILER_REVISION\n  ) {\n    return;\n  }\n\n  if (compilerRevision < LAST_COMPATIBLE_COMPILER_REVISION) {\n    const runtimeVersions = REVISION_CHANGES[currentRevision],\n      compilerVersions = REVISION_CHANGES[compilerRevision];\n    throw new Exception(\n      'Template was precompiled with an older version of Handlebars than the current runtime. ' +\n        'Please update your precompiler to a newer version (' +\n        runtimeVersions +\n        ') or downgrade your runtime to an older version (' +\n        compilerVersions +\n        ').'\n    );\n  } else {\n    // Use the embedded version info since the runtime doesn't know about this revision yet\n    throw new Exception(\n      'Template was precompiled with a newer version of Handlebars than the current runtime. ' +\n        'Please update your runtime to a newer version (' +\n        compilerInfo[1] +\n        ').'\n    );\n  }\n}\n\nexport function template(templateSpec, env) {\n  /* istanbul ignore next */\n  if (!env) {\n    throw new Exception('No environment passed to template');\n  }\n  if (!templateSpec || !templateSpec.main) {\n    throw new Exception('Unknown template object: ' + typeof templateSpec);\n  }\n\n  templateSpec.main.decorator = templateSpec.main_d;\n\n  // Note: Using env.VM references rather than local var references throughout this section to allow\n  // for external users to override these as pseudo-supported APIs.\n  env.VM.checkRevision(templateSpec.compiler);\n\n  // backwards compatibility for precompiled templates with compiler-version 7 (<4.3.0)\n  const templateWasPrecompiledWithCompilerV7 =\n    templateSpec.compiler && templateSpec.compiler[0] === 7;\n\n  function invokePartialWrapper(partial, context, options) {\n    if (options.hash) {\n      context = Utils.extend({}, context, options.hash);\n      if (options.ids) {\n        options.ids[0] = true;\n      }\n    }\n    partial = env.VM.resolvePartial.call(this, partial, context, options);\n\n    let extendedOptions = Utils.extend({}, options, {\n      hooks: this.hooks,\n      protoAccessControl: this.protoAccessControl\n    });\n\n    let result = env.VM.invokePartial.call(\n      this,\n      partial,\n      context,\n      extendedOptions\n    );\n\n    if (result == null && env.compile) {\n      options.partials[options.name] = env.compile(\n        partial,\n        templateSpec.compilerOptions,\n        env\n      );\n      result = options.partials[options.name](context, extendedOptions);\n    }\n    if (result != null) {\n      if (options.indent) {\n        let lines = result.split('\\n');\n        for (let i = 0, l = lines.length; i < l; i++) {\n          if (!lines[i] && i + 1 === l) {\n            break;\n          }\n\n          lines[i] = options.indent + lines[i];\n        }\n        result = lines.join('\\n');\n      }\n      return result;\n    } else {\n      throw new Exception(\n        'The partial ' +\n          options.name +\n          ' could not be compiled when running in runtime-only mode'\n      );\n    }\n  }\n\n  // Just add water\n  let container = {\n    strict: function(obj, name, loc) {\n      if (!obj || !(name in obj)) {\n        throw new Exception('\"' + name + '\" not defined in ' + obj, {\n          loc: loc\n        });\n      }\n      return obj[name];\n    },\n    lookupProperty: function(parent, propertyName) {\n      let result = parent[propertyName];\n      if (result == null) {\n        return result;\n      }\n      if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n        return result;\n      }\n\n      if (resultIsAllowed(result, container.protoAccessControl, propertyName)) {\n        return result;\n      }\n      return undefined;\n    },\n    lookup: function(depths, name) {\n      const len = depths.length;\n      for (let i = 0; i < len; i++) {\n        let result = depths[i] && container.lookupProperty(depths[i], name);\n        if (result != null) {\n          return depths[i][name];\n        }\n      }\n    },\n    lambda: function(current, context) {\n      return typeof current === 'function' ? current.call(context) : current;\n    },\n\n    escapeExpression: Utils.escapeExpression,\n    invokePartial: invokePartialWrapper,\n\n    fn: function(i) {\n      let ret = templateSpec[i];\n      ret.decorator = templateSpec[i + '_d'];\n      return ret;\n    },\n\n    programs: [],\n    program: function(i, data, declaredBlockParams, blockParams, depths) {\n      let programWrapper = this.programs[i],\n        fn = this.fn(i);\n      if (data || depths || blockParams || declaredBlockParams) {\n        programWrapper = wrapProgram(\n          this,\n          i,\n          fn,\n          data,\n          declaredBlockParams,\n          blockParams,\n          depths\n        );\n      } else if (!programWrapper) {\n        programWrapper = this.programs[i] = wrapProgram(this, i, fn);\n      }\n      return programWrapper;\n    },\n\n    data: function(value, depth) {\n      while (value && depth--) {\n        value = value._parent;\n      }\n      return value;\n    },\n    mergeIfNeeded: function(param, common) {\n      let obj = param || common;\n\n      if (param && common && param !== common) {\n        obj = Utils.extend({}, common, param);\n      }\n\n      return obj;\n    },\n    // An empty object to use as replacement for null-contexts\n    nullContext: Object.seal({}),\n\n    noop: env.VM.noop,\n    compilerInfo: templateSpec.compiler\n  };\n\n  function ret(context, options = {}) {\n    let data = options.data;\n\n    ret._setup(options);\n    if (!options.partial && templateSpec.useData) {\n      data = initData(context, data);\n    }\n    let depths,\n      blockParams = templateSpec.useBlockParams ? [] : undefined;\n    if (templateSpec.useDepths) {\n      if (options.depths) {\n        depths =\n          context != options.depths[0]\n            ? [context].concat(options.depths)\n            : options.depths;\n      } else {\n        depths = [context];\n      }\n    }\n\n    function main(context /*, options*/) {\n      return (\n        '' +\n        templateSpec.main(\n          container,\n          context,\n          container.helpers,\n          container.partials,\n          data,\n          blockParams,\n          depths\n        )\n      );\n    }\n\n    main = executeDecorators(\n      templateSpec.main,\n      main,\n      container,\n      options.depths || [],\n      data,\n      blockParams\n    );\n    return main(context, options);\n  }\n\n  ret.isTop = true;\n\n  ret._setup = function(options) {\n    if (!options.partial) {\n      let mergedHelpers = Utils.extend({}, env.helpers, options.helpers);\n      wrapHelpersToPassLookupProperty(mergedHelpers, container);\n      container.helpers = mergedHelpers;\n\n      if (templateSpec.usePartial) {\n        // Use mergeIfNeeded here to prevent compiling global partials multiple times\n        container.partials = container.mergeIfNeeded(\n          options.partials,\n          env.partials\n        );\n      }\n      if (templateSpec.usePartial || templateSpec.useDecorators) {\n        container.decorators = Utils.extend(\n          {},\n          env.decorators,\n          options.decorators\n        );\n      }\n\n      container.hooks = {};\n      container.protoAccessControl = createProtoAccessControl(options);\n\n      let keepHelperInHelpers =\n        options.allowCallsToHelperMissing ||\n        templateWasPrecompiledWithCompilerV7;\n      moveHelperToHooks(container, 'helperMissing', keepHelperInHelpers);\n      moveHelperToHooks(container, 'blockHelperMissing', keepHelperInHelpers);\n    } else {\n      container.protoAccessControl = options.protoAccessControl; // internal option\n      container.helpers = options.helpers;\n      container.partials = options.partials;\n      container.decorators = options.decorators;\n      container.hooks = options.hooks;\n    }\n  };\n\n  ret._child = function(i, data, blockParams, depths) {\n    if (templateSpec.useBlockParams && !blockParams) {\n      throw new Exception('must pass block params');\n    }\n    if (templateSpec.useDepths && !depths) {\n      throw new Exception('must pass parent depths');\n    }\n\n    return wrapProgram(\n      container,\n      i,\n      templateSpec[i],\n      data,\n      0,\n      blockParams,\n      depths\n    );\n  };\n  return ret;\n}\n\nexport function wrapProgram(\n  container,\n  i,\n  fn,\n  data,\n  declaredBlockParams,\n  blockParams,\n  depths\n) {\n  function prog(context, options = {}) {\n    let currentDepths = depths;\n    if (\n      depths &&\n      context != depths[0] &&\n      !(context === container.nullContext && depths[0] === null)\n    ) {\n      currentDepths = [context].concat(depths);\n    }\n\n    return fn(\n      container,\n      context,\n      container.helpers,\n      container.partials,\n      options.data || data,\n      blockParams && [options.blockParams].concat(blockParams),\n      currentDepths\n    );\n  }\n\n  prog = executeDecorators(fn, prog, container, depths, data, blockParams);\n\n  prog.program = i;\n  prog.depth = depths ? depths.length : 0;\n  prog.blockParams = declaredBlockParams || 0;\n  return prog;\n}\n\n/**\n * This is currently part of the official API, therefore implementation details should not be changed.\n */\nexport function resolvePartial(partial, context, options) {\n  if (!partial) {\n    if (options.name === '@partial-block') {\n      partial = options.data['partial-block'];\n    } else {\n      partial = options.partials[options.name];\n    }\n  } else if (!partial.call && !options.name) {\n    // This is a dynamic partial that returned a string\n    options.name = partial;\n    partial = options.partials[partial];\n  }\n  return partial;\n}\n\nexport function invokePartial(partial, context, options) {\n  // Use the current closure context to save the partial-block if this partial\n  const currentPartialBlock = options.data && options.data['partial-block'];\n  options.partial = true;\n  if (options.ids) {\n    options.data.contextPath = options.ids[0] || options.data.contextPath;\n  }\n\n  let partialBlock;\n  if (options.fn && options.fn !== noop) {\n    options.data = createFrame(options.data);\n    // Wrapper function to get access to currentPartialBlock from the closure\n    let fn = options.fn;\n    partialBlock = options.data['partial-block'] = function partialBlockWrapper(\n      context,\n      options = {}\n    ) {\n      // Restore the partial-block from the closure for the execution of the block\n      // i.e. the part inside the block of the partial call.\n      options.data = createFrame(options.data);\n      options.data['partial-block'] = currentPartialBlock;\n      return fn(context, options);\n    };\n    if (fn.partials) {\n      options.partials = Utils.extend({}, options.partials, fn.partials);\n    }\n  }\n\n  if (partial === undefined && partialBlock) {\n    partial = partialBlock;\n  }\n\n  if (partial === undefined) {\n    throw new Exception('The partial ' + options.name + ' could not be found');\n  } else if (partial instanceof Function) {\n    return partial(context, options);\n  }\n}\n\nexport function noop() {\n  return '';\n}\n\nfunction initData(context, data) {\n  if (!data || !('root' in data)) {\n    data = data ? createFrame(data) : {};\n    data.root = context;\n  }\n  return data;\n}\n\nfunction executeDecorators(fn, prog, container, depths, data, blockParams) {\n  if (fn.decorator) {\n    let props = {};\n    prog = fn.decorator(\n      prog,\n      props,\n      container,\n      depths && depths[0],\n      data,\n      blockParams,\n      depths\n    );\n    Utils.extend(prog, props);\n  }\n  return prog;\n}\n\nfunction wrapHelpersToPassLookupProperty(mergedHelpers, container) {\n  Object.keys(mergedHelpers).forEach(helperName => {\n    let helper = mergedHelpers[helperName];\n    mergedHelpers[helperName] = passLookupPropertyOption(helper, container);\n  });\n}\n\nfunction passLookupPropertyOption(helper, container) {\n  const lookupProperty = container.lookupProperty;\n  return wrapHelper(helper, options => {\n    return Utils.extend({ lookupProperty }, options);\n  });\n}\n",
    "// Build out our basic SafeString type\nfunction SafeString(string) {\n  this.string = string;\n}\n\nSafeString.prototype.toString = SafeString.prototype.toHTML = function() {\n  return '' + this.string;\n};\n\nexport default SafeString;\n",
    "const escape = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;',\n  '=': '&#x3D;'\n};\n\nconst badChars = /[&<>\"'`=]/g,\n  possible = /[&<>\"'`=]/;\n\nfunction escapeChar(chr) {\n  return escape[chr];\n}\n\nexport function extend(obj /* , ...source */) {\n  for (let i = 1; i < arguments.length; i++) {\n    for (let key in arguments[i]) {\n      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {\n        obj[key] = arguments[i][key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nexport let toString = Object.prototype.toString;\n\n// Sourced from lodash\n// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt\n/* eslint-disable func-style */\nlet isFunction = function(value) {\n  return typeof value === 'function';\n};\n// fallback for older versions of Chrome and Safari\n/* istanbul ignore next */\nif (isFunction(/x/)) {\n  isFunction = function(value) {\n    return (\n      typeof value === 'function' &&\n      toString.call(value) === '[object Function]'\n    );\n  };\n}\nexport { isFunction };\n/* eslint-enable func-style */\n\n/* istanbul ignore next */\nexport const isArray =\n  Array.isArray ||\n  function(value) {\n    return value && typeof value === 'object'\n      ? toString.call(value) === '[object Array]'\n      : false;\n  };\n\n// Older IE versions do not directly support indexOf so we must implement our own, sadly.\nexport function indexOf(array, value) {\n  for (let i = 0, len = array.length; i < len; i++) {\n    if (array[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nexport function escapeExpression(string) {\n  if (typeof string !== 'string') {\n    // don't escape SafeStrings, since they're already safe\n    if (string && string.toHTML) {\n      return string.toHTML();\n    } else if (string == null) {\n      return '';\n    } else if (!string) {\n      return string + '';\n    }\n\n    // Force a string conversion as this will be done by the append regardless and\n    // the regex test will do this transparently behind the scenes, causing issues if\n    // an object's to string has escaped characters in it.\n    string = '' + string;\n  }\n\n  if (!possible.test(string)) {\n    return string;\n  }\n  return string.replace(badChars, escapeChar);\n}\n\nexport function isEmpty(value) {\n  if (!value && value !== 0) {\n    return true;\n  } else if (isArray(value) && value.length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function createFrame(object) {\n  let frame = extend({}, object);\n  frame._parent = object;\n  return frame;\n}\n\nexport function blockParams(params, ids) {\n  params.path = ids;\n  return params;\n}\n\nexport function appendContextPath(contextPath, id) {\n  return (contextPath ? contextPath + '.' : '') + id;\n}\n",
    "'use strict';\nif (!Array.prototype.find) {\n    Object.defineProperty(Array.prototype, 'find', {\n        value: function (predicate) {\n\n            if (this == null) {\n                throw new TypeError('this is null or not defined');\n            }\n\n            var obj = Object(this);\n            var len = obj.length >>> 0;\n\n            if (typeof predicate !== 'function') {\n                throw new TypeError('predicate must be a function');\n            }\n\n            var thisArg = arguments[1];\n\n            var index = 0;\n\n            while (index < len) {\n                var iValue = obj[index];\n                if (predicate.call(thisArg, iValue, index, obj)) {\n                    return iValue;\n                }\n                index++;\n            }\n\n            return undefined;\n        }\n    });\n}",
    "function n(n){return n=n||Object.create(null),{on:function(c,e){(n[c]||(n[c]=[])).push(e)},off:function(c,e){n[c]&&n[c].splice(n[c].indexOf(e)>>>0,1)},emit:function(c,e){(n[c]||[]).slice().map(function(n){n(e)}),(n[\"*\"]||[]).slice().map(function(n){n(c,e)})}}}module.exports=n;\n//# sourceMappingURL=mitt.js.map",
    "//! moment.js\n//! version : 2.28.0\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n\n;(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.moment = factory()\n}(this, (function () { 'use strict';\n\n    var hookCallback;\n\n    function hooks() {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback(callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return (\n            input instanceof Array ||\n            Object.prototype.toString.call(input) === '[object Array]'\n        );\n    }\n\n    function isObject(input) {\n        // IE8 will treat undefined and null as object if it wasn't for\n        // input != null\n        return (\n            input != null &&\n            Object.prototype.toString.call(input) === '[object Object]'\n        );\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function isObjectEmpty(obj) {\n        if (Object.getOwnPropertyNames) {\n            return Object.getOwnPropertyNames(obj).length === 0;\n        } else {\n            var k;\n            for (k in obj) {\n                if (hasOwnProp(obj, k)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    function isNumber(input) {\n        return (\n            typeof input === 'number' ||\n            Object.prototype.toString.call(input) === '[object Number]'\n        );\n    }\n\n    function isDate(input) {\n        return (\n            input instanceof Date ||\n            Object.prototype.toString.call(input) === '[object Date]'\n        );\n    }\n\n    function map(arr, fn) {\n        var res = [],\n            i;\n        for (i = 0; i < arr.length; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function createUTC(input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty: false,\n            unusedTokens: [],\n            unusedInput: [],\n            overflow: -2,\n            charsLeftOver: 0,\n            nullInput: false,\n            invalidEra: null,\n            invalidMonth: null,\n            invalidFormat: false,\n            userInvalidated: false,\n            iso: false,\n            parsedDateParts: [],\n            era: null,\n            meridiem: null,\n            rfc2822: false,\n            weekdayMismatch: false,\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this),\n                len = t.length >>> 0,\n                i;\n\n            for (i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    function isValid(m) {\n        if (m._isValid == null) {\n            var flags = getParsingFlags(m),\n                parsedParts = some.call(flags.parsedDateParts, function (i) {\n                    return i != null;\n                }),\n                isNowValid =\n                    !isNaN(m._d.getTime()) &&\n                    flags.overflow < 0 &&\n                    !flags.empty &&\n                    !flags.invalidEra &&\n                    !flags.invalidMonth &&\n                    !flags.invalidWeekday &&\n                    !flags.weekdayMismatch &&\n                    !flags.nullInput &&\n                    !flags.invalidFormat &&\n                    !flags.userInvalidated &&\n                    (!flags.meridiem || (flags.meridiem && parsedParts));\n\n            if (m._strict) {\n                isNowValid =\n                    isNowValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n\n            if (Object.isFrozen == null || !Object.isFrozen(m)) {\n                m._isValid = isNowValid;\n            } else {\n                return isNowValid;\n            }\n        }\n        return m._isValid;\n    }\n\n    function createInvalid(flags) {\n        var m = createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        } else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = (hooks.momentProperties = []),\n        updateInProgress = false;\n\n    function copyConfig(to, from) {\n        var i, prop, val;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentProperties.length > 0) {\n            for (i = 0; i < momentProperties.length; i++) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        if (!this.isValid()) {\n            this._d = new Date(NaN);\n        }\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment(obj) {\n        return (\n            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)\n        );\n    }\n\n    function warn(msg) {\n        if (\n            hooks.suppressDeprecationWarnings === false &&\n            typeof console !== 'undefined' &&\n            console.warn\n        ) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (hooks.deprecationHandler != null) {\n                hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                var args = [],\n                    arg,\n                    i,\n                    key;\n                for (i = 0; i < arguments.length; i++) {\n                    arg = '';\n                    if (typeof arguments[i] === 'object') {\n                        arg += '\\n[' + i + '] ';\n                        for (key in arguments[0]) {\n                            if (hasOwnProp(arguments[0], key)) {\n                                arg += key + ': ' + arguments[0][key] + ', ';\n                            }\n                        }\n                        arg = arg.slice(0, -2); // Remove trailing comma and space\n                    } else {\n                        arg = arguments[i];\n                    }\n                    args.push(arg);\n                }\n                warn(\n                    msg +\n                        '\\nArguments: ' +\n                        Array.prototype.slice.call(args).join('') +\n                        '\\n' +\n                        new Error().stack\n                );\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (hooks.deprecationHandler != null) {\n            hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    hooks.suppressDeprecationWarnings = false;\n    hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return (\n            (typeof Function !== 'undefined' && input instanceof Function) ||\n            Object.prototype.toString.call(input) === '[object Function]'\n        );\n    }\n\n    function set(config) {\n        var prop, i;\n        for (i in config) {\n            if (hasOwnProp(config, i)) {\n                prop = config[i];\n                if (isFunction(prop)) {\n                    this[i] = prop;\n                } else {\n                    this['_' + i] = prop;\n                }\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        this._dayOfMonthOrdinalParseLenient = new RegExp(\n            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +\n                '|' +\n                /\\d{1,2}/.source\n        );\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig),\n            prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (\n                hasOwnProp(parentConfig, prop) &&\n                !hasOwnProp(childConfig, prop) &&\n                isObject(parentConfig[prop])\n            ) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i,\n                res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var defaultCalendar = {\n        sameDay: '[Today at] LT',\n        nextDay: '[Tomorrow at] LT',\n        nextWeek: 'dddd [at] LT',\n        lastDay: '[Yesterday at] LT',\n        lastWeek: '[Last] dddd [at] LT',\n        sameElse: 'L',\n    };\n\n    function calendar(key, mom, now) {\n        var output = this._calendar[key] || this._calendar['sameElse'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = '' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (\n            (sign ? (forceSign ? '+' : '') : '-') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +\n            absNumber\n        );\n    }\n\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,\n        localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g,\n        formatFunctions = {},\n        formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken(token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(\n                    func.apply(this, arguments),\n                    token\n                );\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens),\n            i,\n            length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '',\n                i;\n            for (i = 0; i < length; i++) {\n                output += isFunction(array[i])\n                    ? array[i].call(mom, format)\n                    : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] =\n            formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(\n                localFormattingTokens,\n                replaceLongDateFormatTokens\n            );\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var defaultLongDateFormat = {\n        LTS: 'h:mm:ss A',\n        LT: 'h:mm A',\n        L: 'MM/DD/YYYY',\n        LL: 'MMMM D, YYYY',\n        LLL: 'MMMM D, YYYY h:mm A',\n        LLLL: 'dddd, MMMM D, YYYY h:mm A',\n    };\n\n    function longDateFormat(key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper\n            .match(formattingTokens)\n            .map(function (tok) {\n                if (\n                    tok === 'MMMM' ||\n                    tok === 'MM' ||\n                    tok === 'DD' ||\n                    tok === 'dddd'\n                ) {\n                    return tok.slice(1);\n                }\n                return tok;\n            })\n            .join('');\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate() {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d',\n        defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\n\n    function ordinal(number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    var defaultRelativeTime = {\n        future: 'in %s',\n        past: '%s ago',\n        s: 'a few seconds',\n        ss: '%d seconds',\n        m: 'a minute',\n        mm: '%d minutes',\n        h: 'an hour',\n        hh: '%d hours',\n        d: 'a day',\n        dd: '%d days',\n        w: 'a week',\n        ww: '%d weeks',\n        M: 'a month',\n        MM: '%d months',\n        y: 'a year',\n        yy: '%d years',\n    };\n\n    function relativeTime(number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return isFunction(output)\n            ? output(number, withoutSuffix, string, isFuture)\n            : output.replace(/%d/i, number);\n    }\n\n    function pastFuture(diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {};\n\n    function addUnitAlias(unit, shorthand) {\n        var lowerCase = unit.toLowerCase();\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n    }\n\n    function normalizeUnits(units) {\n        return typeof units === 'string'\n            ? aliases[units] || aliases[units.toLowerCase()]\n            : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {};\n\n    function addUnitPriority(unit, priority) {\n        priorities[unit] = priority;\n    }\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [],\n            u;\n        for (u in unitsObj) {\n            if (hasOwnProp(unitsObj, u)) {\n                units.push({ unit: u, priority: priorities[u] });\n            }\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    function absFloor(number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    function makeGetSet(unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                set$1(this, unit, value);\n                hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get(this, unit);\n            }\n        };\n    }\n\n    function get(mom, unit) {\n        return mom.isValid()\n            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()\n            : NaN;\n    }\n\n    function set$1(mom, unit, value) {\n        if (mom.isValid() && !isNaN(value)) {\n            if (\n                unit === 'FullYear' &&\n                isLeapYear(mom.year()) &&\n                mom.month() === 1 &&\n                mom.date() === 29\n            ) {\n                value = toInt(value);\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](\n                    value,\n                    mom.month(),\n                    daysInMonth(value, mom.month())\n                );\n            } else {\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function stringGet(units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n    function stringSet(units, value) {\n        if (typeof units === 'object') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units),\n                i;\n            for (i = 0; i < prioritized.length; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    var match1 = /\\d/, //       0 - 9\n        match2 = /\\d\\d/, //      00 - 99\n        match3 = /\\d{3}/, //     000 - 999\n        match4 = /\\d{4}/, //    0000 - 9999\n        match6 = /[+-]?\\d{6}/, // -999999 - 999999\n        match1to2 = /\\d\\d?/, //       0 - 99\n        match3to4 = /\\d\\d\\d\\d?/, //     999 - 9999\n        match5to6 = /\\d\\d\\d\\d\\d\\d?/, //   99999 - 999999\n        match1to3 = /\\d{1,3}/, //       0 - 999\n        match1to4 = /\\d{1,4}/, //       0 - 9999\n        match1to6 = /[+-]?\\d{1,6}/, // -999999 - 999999\n        matchUnsigned = /\\d+/, //       0 - inf\n        matchSigned = /[+-]?\\d+/, //    -inf - inf\n        matchOffset = /Z|[+-]\\d\\d:?\\d\\d/gi, // +00:00 -00:00 +0000 -0000 or Z\n        matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n        matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/, // 123456789 123456789.123\n        // any word (or two) characters or numbers including two/three word month in arabic.\n        // includes scottish gaelic two word and hyphenated months\n        matchWord = /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFF07\\uFF10-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i,\n        regexes;\n\n    regexes = {};\n\n    function addRegexToken(token, regex, strictRegex) {\n        regexes[token] = isFunction(regex)\n            ? regex\n            : function (isStrict, localeData) {\n                  return isStrict && strictRegex ? strictRegex : regex;\n              };\n    }\n\n    function getParseRegexForToken(token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(\n            s\n                .replace('\\\\', '')\n                .replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (\n                    matched,\n                    p1,\n                    p2,\n                    p3,\n                    p4\n                ) {\n                    return p1 || p2 || p3 || p4;\n                })\n        );\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    var tokens = {};\n\n    function addParseToken(token, callback) {\n        var i,\n            func = callback;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (isNumber(callback)) {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        for (i = 0; i < token.length; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken(token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    var YEAR = 0,\n        MONTH = 1,\n        DATE = 2,\n        HOUR = 3,\n        MINUTE = 4,\n        SECOND = 5,\n        MILLISECOND = 6,\n        WEEK = 7,\n        WEEKDAY = 8;\n\n    function mod(n, x) {\n        return ((n % x) + x) % x;\n    }\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    function daysInMonth(year, month) {\n        if (isNaN(year) || isNaN(month)) {\n            return NaN;\n        }\n        var modMonth = mod(month, 12);\n        year += (month - modMonth) / 12;\n        return modMonth === 1\n            ? isLeapYear(year)\n                ? 29\n                : 28\n            : 31 - ((modMonth % 7) % 2);\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // ALIASES\n\n    addUnitAlias('month', 'M');\n\n    // PRIORITY\n\n    addUnitPriority('month', 8);\n\n    // PARSING\n\n    addRegexToken('M', match1to2);\n    addRegexToken('MM', match1to2, match2);\n    addRegexToken('MMM', function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(\n            '_'\n        ),\n        defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(\n            '_'\n        ),\n        MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/,\n        defaultMonthsShortRegex = matchWord,\n        defaultMonthsRegex = matchWord;\n\n    function localeMonths(m, format) {\n        if (!m) {\n            return isArray(this._months)\n                ? this._months\n                : this._months['standalone'];\n        }\n        return isArray(this._months)\n            ? this._months[m.month()]\n            : this._months[\n                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)\n                      ? 'format'\n                      : 'standalone'\n              ][m.month()];\n    }\n\n    function localeMonthsShort(m, format) {\n        if (!m) {\n            return isArray(this._monthsShort)\n                ? this._monthsShort\n                : this._monthsShort['standalone'];\n        }\n        return isArray(this._monthsShort)\n            ? this._monthsShort[m.month()]\n            : this._monthsShort[\n                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'\n              ][m.month()];\n    }\n\n    function handleStrictParse(monthName, format, strict) {\n        var i,\n            ii,\n            mom,\n            llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(\n                    mom,\n                    ''\n                ).toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse(monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp(\n                    '^' + this.months(mom, '').replace('.', '') + '$',\n                    'i'\n                );\n                this._shortMonthsParse[i] = new RegExp(\n                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',\n                    'i'\n                );\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex =\n                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (\n                strict &&\n                format === 'MMMM' &&\n                this._longMonthsParse[i].test(monthName)\n            ) {\n                return i;\n            } else if (\n                strict &&\n                format === 'MMM' &&\n                this._shortMonthsParse[i].test(monthName)\n            ) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth(mom, value) {\n        var dayOfMonth;\n\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === 'string') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (!isNumber(value)) {\n                    return mom;\n                }\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n        return mom;\n    }\n\n    function getSetMonth(value) {\n        if (value != null) {\n            setMonth(this, value);\n            hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth() {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    function monthsShortRegex(isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict\n                ? this._monthsShortStrictRegex\n                : this._monthsShortRegex;\n        }\n    }\n\n    function monthsRegex(isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict\n                ? this._monthsStrictRegex\n                : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse() {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [],\n            longPieces = [],\n            mixedPieces = [],\n            i,\n            mom;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            shortPieces.push(this.monthsShort(mom, ''));\n            longPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.monthsShort(mom, ''));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp(\n            '^(' + longPieces.join('|') + ')',\n            'i'\n        );\n        this._monthsShortStrictRegex = new RegExp(\n            '^(' + shortPieces.join('|') + ')',\n            'i'\n        );\n    }\n\n    // FORMATTING\n\n    addFormatToken('Y', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? zeroFill(y, 4) : '+' + y;\n    });\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY', 4], 0, 'year');\n    addFormatToken(0, ['YYYYY', 5], 0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // ALIASES\n\n    addUnitAlias('year', 'y');\n\n    // PRIORITIES\n\n    addUnitPriority('year', 1);\n\n    // PARSING\n\n    addRegexToken('Y', matchSigned);\n    addRegexToken('YY', match1to2, match2);\n    addRegexToken('YYYY', match1to4, match4);\n    addRegexToken('YYYYY', match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array) {\n        array[YEAR] =\n            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = hooks.parseTwoDigitYear(input);\n    });\n    addParseToken('Y', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    // HOOKS\n\n    hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', true);\n\n    function getIsLeapYear() {\n        return isLeapYear(this.year());\n    }\n\n    function createDate(y, m, d, h, M, s, ms) {\n        // can't just apply() to create a date:\n        // https://stackoverflow.com/q/181348\n        var date;\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            date = new Date(y + 400, m, d, h, M, s, ms);\n            if (isFinite(date.getFullYear())) {\n                date.setFullYear(y);\n            }\n        } else {\n            date = new Date(y, m, d, h, M, s, ms);\n        }\n\n        return date;\n    }\n\n    function createUTCDate(y) {\n        var date, args;\n        // the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            args = Array.prototype.slice.call(arguments);\n            // preserve leap years using a full 400 year cycle, then reset\n            args[0] = y + 400;\n            date = new Date(Date.UTC.apply(null, args));\n            if (isFinite(date.getUTCFullYear())) {\n                date.setUTCFullYear(y);\n            }\n        } else {\n            date = new Date(Date.UTC.apply(null, arguments));\n        }\n\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear,\n            resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear,\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek,\n            resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear,\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // ALIASES\n\n    addUnitAlias('week', 'w');\n    addUnitAlias('isoWeek', 'W');\n\n    // PRIORITIES\n\n    addUnitPriority('week', 5);\n    addUnitPriority('isoWeek', 5);\n\n    // PARSING\n\n    addRegexToken('w', match1to2);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W', match1to2);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (\n        input,\n        week,\n        config,\n        token\n    ) {\n        week[token.substr(0, 1)] = toInt(input);\n    });\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek(mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow: 0, // Sunday is the first day of the week.\n        doy: 6, // The week that contains Jan 6th is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek() {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear() {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek(input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek(input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // ALIASES\n\n    addUnitAlias('day', 'd');\n    addUnitAlias('weekday', 'e');\n    addUnitAlias('isoWeekday', 'E');\n\n    // PRIORITY\n    addUnitPriority('day', 11);\n    addUnitPriority('weekday', 11);\n    addUnitPriority('isoWeekday', 11);\n\n    // PARSING\n\n    addRegexToken('d', match1to2);\n    addRegexToken('e', match1to2);\n    addRegexToken('E', match1to2);\n    addRegexToken('dd', function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd', function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd', function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== 'string') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === 'number') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === 'string') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n    function shiftWeekdays(ws, n) {\n        return ws.slice(n, 7).concat(ws.slice(0, n));\n    }\n\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(\n            '_'\n        ),\n        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),\n        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),\n        defaultWeekdaysRegex = matchWord,\n        defaultWeekdaysShortRegex = matchWord,\n        defaultWeekdaysMinRegex = matchWord;\n\n    function localeWeekdays(m, format) {\n        var weekdays = isArray(this._weekdays)\n            ? this._weekdays\n            : this._weekdays[\n                  m && m !== true && this._weekdays.isFormat.test(format)\n                      ? 'format'\n                      : 'standalone'\n              ];\n        return m === true\n            ? shiftWeekdays(weekdays, this._week.dow)\n            : m\n            ? weekdays[m.day()]\n            : weekdays;\n    }\n\n    function localeWeekdaysShort(m) {\n        return m === true\n            ? shiftWeekdays(this._weekdaysShort, this._week.dow)\n            : m\n            ? this._weekdaysShort[m.day()]\n            : this._weekdaysShort;\n    }\n\n    function localeWeekdaysMin(m) {\n        return m === true\n            ? shiftWeekdays(this._weekdaysMin, this._week.dow)\n            : m\n            ? this._weekdaysMin[m.day()]\n            : this._weekdaysMin;\n    }\n\n    function handleStrictParse$1(weekdayName, format, strict) {\n        var i,\n            ii,\n            mom,\n            llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(\n                    mom,\n                    ''\n                ).toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(\n                    mom,\n                    ''\n                ).toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse(weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return handleStrictParse$1.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n\n            mom = createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp(\n                    '^' + this.weekdays(mom, '').replace('.', '\\\\.?') + '$',\n                    'i'\n                );\n                this._shortWeekdaysParse[i] = new RegExp(\n                    '^' + this.weekdaysShort(mom, '').replace('.', '\\\\.?') + '$',\n                    'i'\n                );\n                this._minWeekdaysParse[i] = new RegExp(\n                    '^' + this.weekdaysMin(mom, '').replace('.', '\\\\.?') + '$',\n                    'i'\n                );\n            }\n            if (!this._weekdaysParse[i]) {\n                regex =\n                    '^' +\n                    this.weekdays(mom, '') +\n                    '|^' +\n                    this.weekdaysShort(mom, '') +\n                    '|^' +\n                    this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (\n                strict &&\n                format === 'dddd' &&\n                this._fullWeekdaysParse[i].test(weekdayName)\n            ) {\n                return i;\n            } else if (\n                strict &&\n                format === 'ddd' &&\n                this._shortWeekdaysParse[i].test(weekdayName)\n            ) {\n                return i;\n            } else if (\n                strict &&\n                format === 'dd' &&\n                this._minWeekdaysParse[i].test(weekdayName)\n            ) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    function weekdaysRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict\n                ? this._weekdaysStrictRegex\n                : this._weekdaysRegex;\n        }\n    }\n\n    function weekdaysShortRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict\n                ? this._weekdaysShortStrictRegex\n                : this._weekdaysShortRegex;\n        }\n    }\n\n    function weekdaysMinRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict\n                ? this._weekdaysMinStrictRegex\n                : this._weekdaysMinRegex;\n        }\n    }\n\n    function computeWeekdaysParse() {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [],\n            shortPieces = [],\n            longPieces = [],\n            mixedPieces = [],\n            i,\n            mom,\n            minp,\n            shortp,\n            longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, 1]).day(i);\n            minp = regexEscape(this.weekdaysMin(mom, ''));\n            shortp = regexEscape(this.weekdaysShort(mom, ''));\n            longp = regexEscape(this.weekdays(mom, ''));\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp(\n            '^(' + longPieces.join('|') + ')',\n            'i'\n        );\n        this._weekdaysShortStrictRegex = new RegExp(\n            '^(' + shortPieces.join('|') + ')',\n            'i'\n        );\n        this._weekdaysMinStrictRegex = new RegExp(\n            '^(' + minPieces.join('|') + ')',\n            'i'\n        );\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, hFormat);\n    addFormatToken('k', ['kk', 2], 0, kFormat);\n\n    addFormatToken('hmm', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('hmmss', 0, 0, function () {\n        return (\n            '' +\n            hFormat.apply(this) +\n            zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2)\n        );\n    });\n\n    addFormatToken('Hmm', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('Hmmss', 0, 0, function () {\n        return (\n            '' +\n            this.hours() +\n            zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2)\n        );\n    });\n\n    function meridiem(token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(\n                this.hours(),\n                this.minutes(),\n                lowercase\n            );\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // ALIASES\n\n    addUnitAlias('hour', 'h');\n\n    // PRIORITY\n    addUnitPriority('hour', 13);\n\n    // PARSING\n\n    function matchMeridiem(isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a', matchMeridiem);\n    addRegexToken('A', matchMeridiem);\n    addRegexToken('H', match1to2);\n    addRegexToken('h', match1to2);\n    addRegexToken('k', match1to2);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n    addRegexToken('kk', match1to2, match2);\n\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['k', 'kk'], function (input, array, config) {\n        var kInput = toInt(input);\n        array[HOUR] = kInput === 24 ? 0 : kInput;\n    });\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        var pos1 = input.length - 4,\n            pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        var pos1 = input.length - 4,\n            pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM(input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return (input + '').toLowerCase().charAt(0) === 'p';\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i,\n        // Setting the hour should keep the time, because the user explicitly\n        // specified which hour they want. So trying to maintain the same hour (in\n        // a new timezone) makes sense. Adding/subtracting hours does not follow\n        // this rule.\n        getSetHour = makeGetSet('Hours', true);\n\n    function localeMeridiem(hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse,\n    };\n\n    // internal storage for locale config files\n    var locales = {},\n        localeFamilies = {},\n        globalLocale;\n\n    function commonPrefix(arr1, arr2) {\n        var i,\n            minl = Math.min(arr1.length, arr2.length);\n        for (i = 0; i < minl; i += 1) {\n            if (arr1[i] !== arr2[i]) {\n                return i;\n            }\n        }\n        return minl;\n    }\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0,\n            j,\n            next,\n            locale,\n            split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (\n                    next &&\n                    next.length >= j &&\n                    commonPrefix(split, next) >= j - 1\n                ) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return globalLocale;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null,\n            aliasedRequire;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (\n            locales[name] === undefined &&\n            typeof module !== 'undefined' &&\n            module &&\n            module.exports\n        ) {\n            try {\n                oldLocale = globalLocale._abbr;\n                aliasedRequire = require;\n                aliasedRequire('./locale/' + name);\n                getSetGlobalLocale(oldLocale);\n            } catch (e) {\n                // mark as not found to avoid repeating expensive file require call causing high CPU\n                // when trying to find en-US, en_US, en-us for every format call\n                locales[name] = null; // null means not found\n            }\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function getSetGlobalLocale(key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = getLocale(key);\n            } else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            } else {\n                if (typeof console !== 'undefined' && console.warn) {\n                    //warn user if arguments are passed but the locale could not be set\n                    console.warn(\n                        'Locale ' + key + ' not found. Did you forget to load it?'\n                    );\n                }\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale(name, config) {\n        if (config !== null) {\n            var locale,\n                parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple(\n                    'defineLocaleOverride',\n                    'use moment.updateLocale(localeName, config) to change ' +\n                        'an existing locale. moment.defineLocale(localeName, ' +\n                        'config) should only be used for creating a new locale ' +\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'\n                );\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    locale = loadLocale(config.parentLocale);\n                    if (locale != null) {\n                        parentConfig = locale._config;\n                    } else {\n                        if (!localeFamilies[config.parentLocale]) {\n                            localeFamilies[config.parentLocale] = [];\n                        }\n                        localeFamilies[config.parentLocale].push({\n                            name: name,\n                            config: config,\n                        });\n                        return null;\n                    }\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            if (localeFamilies[name]) {\n                localeFamilies[name].forEach(function (x) {\n                    defineLocale(x.name, x.config);\n                });\n            }\n\n            // backwards compat for now: also set the locale\n            // make sure we set the locale AFTER all child locales have been\n            // created, so we won't end up with the child locale set.\n            getSetGlobalLocale(name);\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale,\n                tmpLocale,\n                parentConfig = baseConfig;\n\n            if (locales[name] != null && locales[name].parentLocale != null) {\n                // Update existing child locale in-place to avoid memory-leaks\n                locales[name].set(mergeConfigs(locales[name]._config, config));\n            } else {\n                // MERGE\n                tmpLocale = loadLocale(name);\n                if (tmpLocale != null) {\n                    parentConfig = tmpLocale._config;\n                }\n                config = mergeConfigs(parentConfig, config);\n                if (tmpLocale == null) {\n                    // updateLocale is called for creating a new locale\n                    // Set abbr so it will have a name (getters return\n                    // undefined otherwise).\n                    config.abbr = name;\n                }\n                locale = new Locale(config);\n                locale.parentLocale = locales[name];\n                locales[name] = locale;\n            }\n\n            // backwards compat for now: also set the locale\n            getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                    if (name === getSetGlobalLocale()) {\n                        getSetGlobalLocale(name);\n                    }\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function getLocale(key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function listLocales() {\n        return keys(locales);\n    }\n\n    function checkOverflow(m) {\n        var overflow,\n            a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH] < 0 || a[MONTH] > 11\n                    ? MONTH\n                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])\n                    ? DATE\n                    : a[HOUR] < 0 ||\n                      a[HOUR] > 24 ||\n                      (a[HOUR] === 24 &&\n                          (a[MINUTE] !== 0 ||\n                              a[SECOND] !== 0 ||\n                              a[MILLISECOND] !== 0))\n                    ? HOUR\n                    : a[MINUTE] < 0 || a[MINUTE] > 59\n                    ? MINUTE\n                    : a[SECOND] < 0 || a[SECOND] > 59\n                    ? SECOND\n                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999\n                    ? MILLISECOND\n                    : -1;\n\n            if (\n                getParsingFlags(m)._overflowDayOfYear &&\n                (overflow < YEAR || overflow > DATE)\n            ) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n        basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d|))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n        tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/,\n        isoDates = [\n            ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n            ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n            ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n            ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n            ['YYYY-DDD', /\\d{4}-\\d{3}/],\n            ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n            ['YYYYYYMMDD', /[+-]\\d{10}/],\n            ['YYYYMMDD', /\\d{8}/],\n            ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n            ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n            ['YYYYDDD', /\\d{7}/],\n            ['YYYYMM', /\\d{6}/, false],\n            ['YYYY', /\\d{4}/, false],\n        ],\n        // iso time formats and regexes\n        isoTimes = [\n            ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n            ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n            ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n            ['HH:mm', /\\d\\d:\\d\\d/],\n            ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n            ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n            ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n            ['HHmm', /\\d\\d\\d\\d/],\n            ['HH', /\\d\\d/],\n        ],\n        aspNetJsonRegex = /^\\/?Date\\((-?\\d+)/i,\n        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n        rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/,\n        obsOffsets = {\n            UT: 0,\n            GMT: 0,\n            EDT: -4 * 60,\n            EST: -5 * 60,\n            CDT: -5 * 60,\n            CST: -6 * 60,\n            MDT: -6 * 60,\n            MST: -7 * 60,\n            PDT: -7 * 60,\n            PST: -8 * 60,\n        };\n\n    // date from iso format\n    function configFromISO(config) {\n        var i,\n            l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime,\n            dateFormat,\n            timeFormat,\n            tzFormat;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n\n            for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimes.length; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = 'Z';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    function extractFromRFC2822Strings(\n        yearStr,\n        monthStr,\n        dayStr,\n        hourStr,\n        minuteStr,\n        secondStr\n    ) {\n        var result = [\n            untruncateYear(yearStr),\n            defaultLocaleMonthsShort.indexOf(monthStr),\n            parseInt(dayStr, 10),\n            parseInt(hourStr, 10),\n            parseInt(minuteStr, 10),\n        ];\n\n        if (secondStr) {\n            result.push(parseInt(secondStr, 10));\n        }\n\n        return result;\n    }\n\n    function untruncateYear(yearStr) {\n        var year = parseInt(yearStr, 10);\n        if (year <= 49) {\n            return 2000 + year;\n        } else if (year <= 999) {\n            return 1900 + year;\n        }\n        return year;\n    }\n\n    function preprocessRFC2822(s) {\n        // Remove comments and folding whitespace and replace multiple-spaces with a single space\n        return s\n            .replace(/\\([^)]*\\)|[\\n\\t]/g, ' ')\n            .replace(/(\\s\\s+)/g, ' ')\n            .replace(/^\\s\\s*/, '')\n            .replace(/\\s\\s*$/, '');\n    }\n\n    function checkWeekday(weekdayStr, parsedInput, config) {\n        if (weekdayStr) {\n            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.\n            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),\n                weekdayActual = new Date(\n                    parsedInput[0],\n                    parsedInput[1],\n                    parsedInput[2]\n                ).getDay();\n            if (weekdayProvided !== weekdayActual) {\n                getParsingFlags(config).weekdayMismatch = true;\n                config._isValid = false;\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function calculateOffset(obsOffset, militaryOffset, numOffset) {\n        if (obsOffset) {\n            return obsOffsets[obsOffset];\n        } else if (militaryOffset) {\n            // the only allowed military tz is Z\n            return 0;\n        } else {\n            var hm = parseInt(numOffset, 10),\n                m = hm % 100,\n                h = (hm - m) / 100;\n            return h * 60 + m;\n        }\n    }\n\n    // date and time from ref 2822 format\n    function configFromRFC2822(config) {\n        var match = rfc2822.exec(preprocessRFC2822(config._i)),\n            parsedArray;\n        if (match) {\n            parsedArray = extractFromRFC2822Strings(\n                match[4],\n                match[3],\n                match[2],\n                match[5],\n                match[6],\n                match[7]\n            );\n            if (!checkWeekday(match[1], parsedArray, config)) {\n                return;\n            }\n\n            config._a = parsedArray;\n            config._tzm = calculateOffset(match[8], match[9], match[10]);\n\n            config._d = createUTCDate.apply(null, config._a);\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n\n            getParsingFlags(config).rfc2822 = true;\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        configFromRFC2822(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        if (config._strict) {\n            config._isValid = false;\n        } else {\n            // Final attempt, use Input Fallback\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    hooks.createFromInputFallback = deprecate(\n        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +\n            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +\n            'discouraged and will be removed in an upcoming major release. Please refer to ' +\n            'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(hooks.now());\n        if (config._useUTC) {\n            return [\n                nowValue.getUTCFullYear(),\n                nowValue.getUTCMonth(),\n                nowValue.getUTCDate(),\n            ];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray(config) {\n        var i,\n            date,\n            input = [],\n            currentDate,\n            expectedWeekday,\n            yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear != null) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (\n                config._dayOfYear > daysInYear(yearToUse) ||\n                config._dayOfYear === 0\n            ) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] =\n                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (\n            config._a[HOUR] === 24 &&\n            config._a[MINUTE] === 0 &&\n            config._a[SECOND] === 0 &&\n            config._a[MILLISECOND] === 0\n        ) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(\n            null,\n            input\n        );\n        expectedWeekday = config._useUTC\n            ? config._d.getUTCDay()\n            : config._d.getDay();\n\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n\n        // check for mismatching day of week\n        if (\n            config._w &&\n            typeof config._w.d !== 'undefined' &&\n            config._w.d !== expectedWeekday\n        ) {\n            getParsingFlags(config).weekdayMismatch = true;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(\n                w.GG,\n                config._a[YEAR],\n                weekOfYear(createLocal(), 1, 4).year\n            );\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            curWeek = weekOfYear(createLocal(), dow, doy);\n\n            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n\n            // Default to current week.\n            week = defaults(w.w, curWeek.week);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from beginning of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to beginning of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // constant that refers to the ISO standard\n    hooks.ISO_8601 = function () {};\n\n    // constant that refers to the RFC 2822 form\n    hooks.RFC_2822 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n        if (config._f === hooks.RFC_2822) {\n            configFromRFC2822(config);\n            return;\n        }\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i,\n            parsedInput,\n            tokens,\n            token,\n            skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0,\n            era;\n\n        tokens =\n            expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) ||\n                [])[0];\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(\n                    string.indexOf(parsedInput) + parsedInput.length\n                );\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                } else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            } else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver =\n            stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (\n            config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0\n        ) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(\n            config._locale,\n            config._a[HOUR],\n            config._meridiem\n        );\n\n        // handle era\n        era = getParsingFlags(config).era;\n        if (era !== null) {\n            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);\n        }\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n    function meridiemFixWrap(locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n            scoreToBeat,\n            i,\n            currentScore,\n            validFormatFound,\n            bestFormatIsValid = false;\n\n        if (config._f.length === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            validFormatFound = false;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (isValid(tempConfig)) {\n                validFormatFound = true;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (!bestFormatIsValid) {\n                if (\n                    scoreToBeat == null ||\n                    currentScore < scoreToBeat ||\n                    validFormatFound\n                ) {\n                    scoreToBeat = currentScore;\n                    bestMoment = tempConfig;\n                    if (validFormatFound) {\n                        bestFormatIsValid = true;\n                    }\n                }\n            } else {\n                if (currentScore < scoreToBeat) {\n                    scoreToBeat = currentScore;\n                    bestMoment = tempConfig;\n                }\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i),\n            dayOrDate = i.day === undefined ? i.date : i.day;\n        config._a = map(\n            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],\n            function (obj) {\n                return obj && parseInt(obj, 10);\n            }\n        );\n\n        configFromArray(config);\n    }\n\n    function createFromConfig(config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig(config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return createInvalid({ nullInput: true });\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (format) {\n            configFromStringAndFormat(config);\n        } else {\n            configFromInput(config);\n        }\n\n        if (!isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (isUndefined(input)) {\n            config._d = new Date(hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (isObject(input)) {\n            configFromObject(config);\n        } else if (isNumber(input)) {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC(input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (format === true || format === false) {\n            strict = format;\n            format = undefined;\n        }\n\n        if (locale === true || locale === false) {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if (\n            (isObject(input) && isObjectEmpty(input)) ||\n            (isArray(input) && input.length === 0)\n        ) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function createLocal(input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n            function () {\n                var other = createLocal.apply(null, arguments);\n                if (this.isValid() && other.isValid()) {\n                    return other < this ? this : other;\n                } else {\n                    return createInvalid();\n                }\n            }\n        ),\n        prototypeMax = deprecate(\n            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n            function () {\n                var other = createLocal.apply(null, arguments);\n                if (this.isValid() && other.isValid()) {\n                    return other > this ? this : other;\n                } else {\n                    return createInvalid();\n                }\n            }\n        );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min() {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max() {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +new Date();\n    };\n\n    var ordering = [\n        'year',\n        'quarter',\n        'month',\n        'week',\n        'day',\n        'hour',\n        'minute',\n        'second',\n        'millisecond',\n    ];\n\n    function isDurationValid(m) {\n        var key,\n            unitHasDecimal = false,\n            i;\n        for (key in m) {\n            if (\n                hasOwnProp(m, key) &&\n                !(\n                    indexOf.call(ordering, key) !== -1 &&\n                    (m[key] == null || !isNaN(m[key]))\n                )\n            ) {\n                return false;\n            }\n        }\n\n        for (i = 0; i < ordering.length; ++i) {\n            if (m[ordering[i]]) {\n                if (unitHasDecimal) {\n                    return false; // only allow non-integers for smallest unit\n                }\n                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {\n                    unitHasDecimal = true;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function isValid$1() {\n        return this._isValid;\n    }\n\n    function createInvalid$1() {\n        return createDuration(NaN);\n    }\n\n    function Duration(duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        this._isValid = isDurationValid(normalizedInput);\n\n        // representation for dateAddRemove\n        this._milliseconds =\n            +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days + weeks * 7;\n        // It is impossible to translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months + quarters * 3 + years * 12;\n\n        this._data = {};\n\n        this._locale = getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration(obj) {\n        return obj instanceof Duration;\n    }\n\n    function absRound(number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if (\n                (dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))\n            ) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    // FORMATTING\n\n    function offset(token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset(),\n                sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return (\n                sign +\n                zeroFill(~~(offset / 60), 2) +\n                separator +\n                zeroFill(~~offset % 60, 2)\n            );\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z', matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = (string || '').match(matcher),\n            chunk,\n            parts,\n            minutes;\n\n        if (matches === null) {\n            return null;\n        }\n\n        chunk = matches[matches.length - 1] || [];\n        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff =\n                (isMoment(input) || isDate(input)\n                    ? input.valueOf()\n                    : createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return createLocal(input).local();\n        }\n    }\n\n    function getDateOffset(m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset());\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset(input, keepLocalTime, keepMinutes) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n                if (input === null) {\n                    return this;\n                }\n            } else if (Math.abs(input) < 16 && !keepMinutes) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    addSubtract(\n                        this,\n                        createDuration(input - offset, 'm'),\n                        1,\n                        false\n                    );\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone(input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC(keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal(keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset() {\n        if (this._tzm != null) {\n            this.utcOffset(this._tzm, false, true);\n        } else if (typeof this._i === 'string') {\n            var tZone = offsetFromString(matchOffset, this._i);\n            if (tZone != null) {\n                this.utcOffset(tZone);\n            } else {\n                this.utcOffset(0, true);\n            }\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset(input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime() {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted() {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {},\n            other;\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n            this._isDSTShifted =\n                this.isValid() && compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal() {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset() {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc() {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(-|\\+)?(?:(\\d*)[. ])?(\\d+):(\\d+)(?::(\\d+)(\\.\\d*)?)?$/,\n        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n        // and further modified to allow for strings containing both week and day\n        isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n    function createDuration(input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms: input._milliseconds,\n                d: input._days,\n                M: input._months,\n            };\n        } else if (isNumber(input) || !isNaN(+input)) {\n            duration = {};\n            if (key) {\n                duration[key] = +input;\n            } else {\n                duration.milliseconds = +input;\n            }\n        } else if ((match = aspNetRegex.exec(input))) {\n            sign = match[1] === '-' ? -1 : 1;\n            duration = {\n                y: 0,\n                d: toInt(match[DATE]) * sign,\n                h: toInt(match[HOUR]) * sign,\n                m: toInt(match[MINUTE]) * sign,\n                s: toInt(match[SECOND]) * sign,\n                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match\n            };\n        } else if ((match = isoRegex.exec(input))) {\n            sign = match[1] === '-' ? -1 : 1;\n            duration = {\n                y: parseIso(match[2], sign),\n                M: parseIso(match[3], sign),\n                w: parseIso(match[4], sign),\n                d: parseIso(match[5], sign),\n                h: parseIso(match[6], sign),\n                m: parseIso(match[7], sign),\n                s: parseIso(match[8], sign),\n            };\n        } else if (duration == null) {\n            // checks for null or undefined\n            duration = {};\n        } else if (\n            typeof duration === 'object' &&\n            ('from' in duration || 'to' in duration)\n        ) {\n            diffRes = momentsDifference(\n                createLocal(duration.from),\n                createLocal(duration.to)\n            );\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        if (isDuration(input) && hasOwnProp(input, '_isValid')) {\n            ret._isValid = input._isValid;\n        }\n\n        return ret;\n    }\n\n    createDuration.fn = Duration.prototype;\n    createDuration.invalid = createInvalid$1;\n\n    function parseIso(inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {};\n\n        res.months =\n            other.month() - base.month() + (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +base.clone().add(res.months, 'M');\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return { milliseconds: 0, months: 0 };\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(\n                    name,\n                    'moment().' +\n                        name +\n                        '(period, number) is deprecated. Please use moment().' +\n                        name +\n                        '(number, period). ' +\n                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'\n                );\n                tmp = val;\n                val = period;\n                period = tmp;\n            }\n\n            dur = createDuration(val, period);\n            addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function addSubtract(mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (months) {\n            setMonth(mom, get(mom, 'Month') + months * isAdding);\n        }\n        if (days) {\n            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);\n        }\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (updateOffset) {\n            hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add = createAdder(1, 'add'),\n        subtract = createAdder(-1, 'subtract');\n\n    function isString(input) {\n        return typeof input === 'string' || input instanceof String;\n    }\n\n    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined\n    function isMomentInput(input) {\n        return (\n            isMoment(input) ||\n            isDate(input) ||\n            isString(input) ||\n            isNumber(input) ||\n            isNumberOrStringArray(input) ||\n            isMomentInputObject(input) ||\n            input === null ||\n            input === undefined\n        );\n    }\n\n    function isMomentInputObject(input) {\n        var objectTest = isObject(input) && !isObjectEmpty(input),\n            propertyTest = false,\n            properties = [\n                'years',\n                'year',\n                'y',\n                'months',\n                'month',\n                'M',\n                'days',\n                'day',\n                'd',\n                'dates',\n                'date',\n                'D',\n                'hours',\n                'hour',\n                'h',\n                'minutes',\n                'minute',\n                'm',\n                'seconds',\n                'second',\n                's',\n                'milliseconds',\n                'millisecond',\n                'ms',\n            ],\n            i,\n            property;\n\n        for (i = 0; i < properties.length; i += 1) {\n            property = properties[i];\n            propertyTest = propertyTest || hasOwnProp(input, property);\n        }\n\n        return objectTest && propertyTest;\n    }\n\n    function isNumberOrStringArray(input) {\n        var arrayTest = isArray(input),\n            dataTypeTest = false;\n        if (arrayTest) {\n            dataTypeTest =\n                input.filter(function (item) {\n                    return !isNumber(item) && isString(input);\n                }).length === 0;\n        }\n        return arrayTest && dataTypeTest;\n    }\n\n    function isCalendarSpec(input) {\n        var objectTest = isObject(input) && !isObjectEmpty(input),\n            propertyTest = false,\n            properties = [\n                'sameDay',\n                'nextDay',\n                'lastDay',\n                'nextWeek',\n                'lastWeek',\n                'sameElse',\n            ],\n            i,\n            property;\n\n        for (i = 0; i < properties.length; i += 1) {\n            property = properties[i];\n            propertyTest = propertyTest || hasOwnProp(input, property);\n        }\n\n        return objectTest && propertyTest;\n    }\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, 'days', true);\n        return diff < -6\n            ? 'sameElse'\n            : diff < -1\n            ? 'lastWeek'\n            : diff < 0\n            ? 'lastDay'\n            : diff < 1\n            ? 'sameDay'\n            : diff < 2\n            ? 'nextDay'\n            : diff < 7\n            ? 'nextWeek'\n            : 'sameElse';\n    }\n\n    function calendar$1(time, formats) {\n        // Support for single parameter, formats only overload to the calendar function\n        if (arguments.length === 1) {\n            if (isMomentInput(arguments[0])) {\n                time = arguments[0];\n                formats = undefined;\n            } else if (isCalendarSpec(arguments[0])) {\n                formats = arguments[0];\n                time = undefined;\n            }\n        }\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            format = hooks.calendarFormat(this, sod) || 'sameElse',\n            output =\n                formats &&\n                (isFunction(formats[format])\n                    ? formats[format].call(this, now)\n                    : formats[format]);\n\n        return this.format(\n            output || this.localeData().calendar(format, this, createLocal(now))\n        );\n    }\n\n    function clone() {\n        return new Moment(this);\n    }\n\n    function isAfter(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween(from, to, units, inclusivity) {\n        var localFrom = isMoment(from) ? from : createLocal(from),\n            localTo = isMoment(to) ? to : createLocal(to);\n        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {\n            return false;\n        }\n        inclusivity = inclusivity || '()';\n        return (\n            (inclusivity[0] === '('\n                ? this.isAfter(localFrom, units)\n                : !this.isBefore(localFrom, units)) &&\n            (inclusivity[1] === ')'\n                ? this.isBefore(localTo, units)\n                : !this.isAfter(localTo, units))\n        );\n    }\n\n    function isSame(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return (\n                this.clone().startOf(units).valueOf() <= inputMs &&\n                inputMs <= this.clone().endOf(units).valueOf()\n            );\n        }\n    }\n\n    function isSameOrAfter(input, units) {\n        return this.isSame(input, units) || this.isAfter(input, units);\n    }\n\n    function isSameOrBefore(input, units) {\n        return this.isSame(input, units) || this.isBefore(input, units);\n    }\n\n    function diff(input, units, asFloat) {\n        var that, zoneDelta, output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        switch (units) {\n            case 'year':\n                output = monthDiff(this, that) / 12;\n                break;\n            case 'month':\n                output = monthDiff(this, that);\n                break;\n            case 'quarter':\n                output = monthDiff(this, that) / 3;\n                break;\n            case 'second':\n                output = (this - that) / 1e3;\n                break; // 1000\n            case 'minute':\n                output = (this - that) / 6e4;\n                break; // 1000 * 60\n            case 'hour':\n                output = (this - that) / 36e5;\n                break; // 1000 * 60 * 60\n            case 'day':\n                output = (this - that - zoneDelta) / 864e5;\n                break; // 1000 * 60 * 60 * 24, negate dst\n            case 'week':\n                output = (this - that - zoneDelta) / 6048e5;\n                break; // 1000 * 60 * 60 * 24 * 7, negate dst\n            default:\n                output = this - that;\n        }\n\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff(a, b) {\n        if (a.date() < b.date()) {\n            // end-of-month calculations work correct when the start month has more\n            // days than the end month.\n            return -monthDiff(b, a);\n        }\n        // difference in months\n        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2,\n            adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n    function toString() {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function toISOString(keepOffset) {\n        if (!this.isValid()) {\n            return null;\n        }\n        var utc = keepOffset !== true,\n            m = utc ? this.clone().utc() : this;\n        if (m.year() < 0 || m.year() > 9999) {\n            return formatMoment(\n                m,\n                utc\n                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'\n                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'\n            );\n        }\n        if (isFunction(Date.prototype.toISOString)) {\n            // native implementation is ~50x faster, use it when we can\n            if (utc) {\n                return this.toDate().toISOString();\n            } else {\n                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)\n                    .toISOString()\n                    .replace('Z', formatMoment(m, 'Z'));\n            }\n        }\n        return formatMoment(\n            m,\n            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'\n        );\n    }\n\n    /**\n     * Return a human readable representation of a moment that can\n     * also be evaluated to get a new moment which is the same\n     *\n     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n     */\n    function inspect() {\n        if (!this.isValid()) {\n            return 'moment.invalid(/* ' + this._i + ' */)';\n        }\n        var func = 'moment',\n            zone = '',\n            prefix,\n            year,\n            datetime,\n            suffix;\n        if (!this.isLocal()) {\n            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n            zone = 'Z';\n        }\n        prefix = '[' + func + '(\"]';\n        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';\n        datetime = '-MM-DD[T]HH:mm:ss.SSS';\n        suffix = zone + '[\")]';\n\n        return this.format(prefix + year + datetime + suffix);\n    }\n\n    function format(inputString) {\n        if (!inputString) {\n            inputString = this.isUtc()\n                ? hooks.defaultFormatUtc\n                : hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from(time, withoutSuffix) {\n        if (\n            this.isValid() &&\n            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())\n        ) {\n            return createDuration({ to: this, from: time })\n                .locale(this.locale())\n                .humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow(withoutSuffix) {\n        return this.from(createLocal(), withoutSuffix);\n    }\n\n    function to(time, withoutSuffix) {\n        if (\n            this.isValid() &&\n            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())\n        ) {\n            return createDuration({ from: this, to: time })\n                .locale(this.locale())\n                .humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow(withoutSuffix) {\n        return this.to(createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale(key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData() {\n        return this._locale;\n    }\n\n    var MS_PER_SECOND = 1000,\n        MS_PER_MINUTE = 60 * MS_PER_SECOND,\n        MS_PER_HOUR = 60 * MS_PER_MINUTE,\n        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;\n\n    // actual modulo - handles negative numbers (for dates before 1970):\n    function mod$1(dividend, divisor) {\n        return ((dividend % divisor) + divisor) % divisor;\n    }\n\n    function localStartOfDate(y, m, d) {\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return new Date(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return new Date(y, m, d).valueOf();\n        }\n    }\n\n    function utcStartOfDate(y, m, d) {\n        // Date.UTC remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return Date.UTC(y, m, d);\n        }\n    }\n\n    function startOf(units) {\n        var time, startOfDate;\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond' || !this.isValid()) {\n            return this;\n        }\n\n        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n        switch (units) {\n            case 'year':\n                time = startOfDate(this.year(), 0, 1);\n                break;\n            case 'quarter':\n                time = startOfDate(\n                    this.year(),\n                    this.month() - (this.month() % 3),\n                    1\n                );\n                break;\n            case 'month':\n                time = startOfDate(this.year(), this.month(), 1);\n                break;\n            case 'week':\n                time = startOfDate(\n                    this.year(),\n                    this.month(),\n                    this.date() - this.weekday()\n                );\n                break;\n            case 'isoWeek':\n                time = startOfDate(\n                    this.year(),\n                    this.month(),\n                    this.date() - (this.isoWeekday() - 1)\n                );\n                break;\n            case 'day':\n            case 'date':\n                time = startOfDate(this.year(), this.month(), this.date());\n                break;\n            case 'hour':\n                time = this._d.valueOf();\n                time -= mod$1(\n                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),\n                    MS_PER_HOUR\n                );\n                break;\n            case 'minute':\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_MINUTE);\n                break;\n            case 'second':\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_SECOND);\n                break;\n        }\n\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n\n    function endOf(units) {\n        var time, startOfDate;\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond' || !this.isValid()) {\n            return this;\n        }\n\n        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n        switch (units) {\n            case 'year':\n                time = startOfDate(this.year() + 1, 0, 1) - 1;\n                break;\n            case 'quarter':\n                time =\n                    startOfDate(\n                        this.year(),\n                        this.month() - (this.month() % 3) + 3,\n                        1\n                    ) - 1;\n                break;\n            case 'month':\n                time = startOfDate(this.year(), this.month() + 1, 1) - 1;\n                break;\n            case 'week':\n                time =\n                    startOfDate(\n                        this.year(),\n                        this.month(),\n                        this.date() - this.weekday() + 7\n                    ) - 1;\n                break;\n            case 'isoWeek':\n                time =\n                    startOfDate(\n                        this.year(),\n                        this.month(),\n                        this.date() - (this.isoWeekday() - 1) + 7\n                    ) - 1;\n                break;\n            case 'day':\n            case 'date':\n                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;\n                break;\n            case 'hour':\n                time = this._d.valueOf();\n                time +=\n                    MS_PER_HOUR -\n                    mod$1(\n                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),\n                        MS_PER_HOUR\n                    ) -\n                    1;\n                break;\n            case 'minute':\n                time = this._d.valueOf();\n                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;\n                break;\n            case 'second':\n                time = this._d.valueOf();\n                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;\n                break;\n        }\n\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n\n    function valueOf() {\n        return this._d.valueOf() - (this._offset || 0) * 60000;\n    }\n\n    function unix() {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate() {\n        return new Date(this.valueOf());\n    }\n\n    function toArray() {\n        var m = this;\n        return [\n            m.year(),\n            m.month(),\n            m.date(),\n            m.hour(),\n            m.minute(),\n            m.second(),\n            m.millisecond(),\n        ];\n    }\n\n    function toObject() {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds(),\n        };\n    }\n\n    function toJSON() {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function isValid$2() {\n        return isValid(this);\n    }\n\n    function parsingFlags() {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt() {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict,\n        };\n    }\n\n    addFormatToken('N', 0, 0, 'eraAbbr');\n    addFormatToken('NN', 0, 0, 'eraAbbr');\n    addFormatToken('NNN', 0, 0, 'eraAbbr');\n    addFormatToken('NNNN', 0, 0, 'eraName');\n    addFormatToken('NNNNN', 0, 0, 'eraNarrow');\n\n    addFormatToken('y', ['y', 1], 'yo', 'eraYear');\n    addFormatToken('y', ['yy', 2], 0, 'eraYear');\n    addFormatToken('y', ['yyy', 3], 0, 'eraYear');\n    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');\n\n    addRegexToken('N', matchEraAbbr);\n    addRegexToken('NN', matchEraAbbr);\n    addRegexToken('NNN', matchEraAbbr);\n    addRegexToken('NNNN', matchEraName);\n    addRegexToken('NNNNN', matchEraNarrow);\n\n    addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (\n        input,\n        array,\n        config,\n        token\n    ) {\n        var era = config._locale.erasParse(input, token, config._strict);\n        if (era) {\n            getParsingFlags(config).era = era;\n        } else {\n            getParsingFlags(config).invalidEra = input;\n        }\n    });\n\n    addRegexToken('y', matchUnsigned);\n    addRegexToken('yy', matchUnsigned);\n    addRegexToken('yyy', matchUnsigned);\n    addRegexToken('yyyy', matchUnsigned);\n    addRegexToken('yo', matchEraYearOrdinal);\n\n    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);\n    addParseToken(['yo'], function (input, array, config, token) {\n        var match;\n        if (config._locale._eraYearOrdinalRegex) {\n            match = input.match(config._locale._eraYearOrdinalRegex);\n        }\n\n        if (config._locale.eraYearOrdinalParse) {\n            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);\n        } else {\n            array[YEAR] = parseInt(input, 10);\n        }\n    });\n\n    function localeEras(m, format) {\n        var i,\n            l,\n            date,\n            eras = this._eras || getLocale('en')._eras;\n        for (i = 0, l = eras.length; i < l; ++i) {\n            switch (typeof eras[i].since) {\n                case 'string':\n                    // truncate time\n                    date = hooks(eras[i].since).startOf('day');\n                    eras[i].since = date.valueOf();\n                    break;\n            }\n\n            switch (typeof eras[i].until) {\n                case 'undefined':\n                    eras[i].until = +Infinity;\n                    break;\n                case 'string':\n                    // truncate time\n                    date = hooks(eras[i].until).startOf('day').valueOf();\n                    eras[i].until = date.valueOf();\n                    break;\n            }\n        }\n        return eras;\n    }\n\n    function localeErasParse(eraName, format, strict) {\n        var i,\n            l,\n            eras = this.eras(),\n            name,\n            abbr,\n            narrow;\n        eraName = eraName.toUpperCase();\n\n        for (i = 0, l = eras.length; i < l; ++i) {\n            name = eras[i].name.toUpperCase();\n            abbr = eras[i].abbr.toUpperCase();\n            narrow = eras[i].narrow.toUpperCase();\n\n            if (strict) {\n                switch (format) {\n                    case 'N':\n                    case 'NN':\n                    case 'NNN':\n                        if (abbr === eraName) {\n                            return eras[i];\n                        }\n                        break;\n\n                    case 'NNNN':\n                        if (name === eraName) {\n                            return eras[i];\n                        }\n                        break;\n\n                    case 'NNNNN':\n                        if (narrow === eraName) {\n                            return eras[i];\n                        }\n                        break;\n                }\n            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {\n                return eras[i];\n            }\n        }\n    }\n\n    function localeErasConvertYear(era, year) {\n        var dir = era.since <= era.until ? +1 : -1;\n        if (year === undefined) {\n            return hooks(era.since).year();\n        } else {\n            return hooks(era.since).year() + (year - era.offset) * dir;\n        }\n    }\n\n    function getEraName() {\n        var i,\n            l,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            // truncate time\n            val = this.clone().startOf('day').valueOf();\n\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].name;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].name;\n            }\n        }\n\n        return '';\n    }\n\n    function getEraNarrow() {\n        var i,\n            l,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            // truncate time\n            val = this.clone().startOf('day').valueOf();\n\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].narrow;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].narrow;\n            }\n        }\n\n        return '';\n    }\n\n    function getEraAbbr() {\n        var i,\n            l,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            // truncate time\n            val = this.clone().startOf('day').valueOf();\n\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].abbr;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].abbr;\n            }\n        }\n\n        return '';\n    }\n\n    function getEraYear() {\n        var i,\n            l,\n            dir,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            dir = eras[i].since <= eras[i].until ? +1 : -1;\n\n            // truncate time\n            val = this.clone().startOf('day').valueOf();\n\n            if (\n                (eras[i].since <= val && val <= eras[i].until) ||\n                (eras[i].until <= val && val <= eras[i].since)\n            ) {\n                return (\n                    (this.year() - hooks(eras[i].since).year()) * dir +\n                    eras[i].offset\n                );\n            }\n        }\n\n        return this.year();\n    }\n\n    function erasNameRegex(isStrict) {\n        if (!hasOwnProp(this, '_erasNameRegex')) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasNameRegex : this._erasRegex;\n    }\n\n    function erasAbbrRegex(isStrict) {\n        if (!hasOwnProp(this, '_erasAbbrRegex')) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasAbbrRegex : this._erasRegex;\n    }\n\n    function erasNarrowRegex(isStrict) {\n        if (!hasOwnProp(this, '_erasNarrowRegex')) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasNarrowRegex : this._erasRegex;\n    }\n\n    function matchEraAbbr(isStrict, locale) {\n        return locale.erasAbbrRegex(isStrict);\n    }\n\n    function matchEraName(isStrict, locale) {\n        return locale.erasNameRegex(isStrict);\n    }\n\n    function matchEraNarrow(isStrict, locale) {\n        return locale.erasNarrowRegex(isStrict);\n    }\n\n    function matchEraYearOrdinal(isStrict, locale) {\n        return locale._eraYearOrdinalRegex || matchUnsigned;\n    }\n\n    function computeErasParse() {\n        var abbrPieces = [],\n            namePieces = [],\n            narrowPieces = [],\n            mixedPieces = [],\n            i,\n            l,\n            eras = this.eras();\n\n        for (i = 0, l = eras.length; i < l; ++i) {\n            namePieces.push(regexEscape(eras[i].name));\n            abbrPieces.push(regexEscape(eras[i].abbr));\n            narrowPieces.push(regexEscape(eras[i].narrow));\n\n            mixedPieces.push(regexEscape(eras[i].name));\n            mixedPieces.push(regexEscape(eras[i].abbr));\n            mixedPieces.push(regexEscape(eras[i].narrow));\n        }\n\n        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');\n        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');\n        this._erasNarrowRegex = new RegExp(\n            '^(' + narrowPieces.join('|') + ')',\n            'i'\n        );\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken(token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg', 'weekYear');\n    addWeekYearFormatToken('ggggg', 'weekYear');\n    addWeekYearFormatToken('GGGG', 'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    addUnitAlias('weekYear', 'gg');\n    addUnitAlias('isoWeekYear', 'GG');\n\n    // PRIORITY\n\n    addUnitPriority('weekYear', 1);\n    addUnitPriority('isoWeekYear', 1);\n\n    // PARSING\n\n    addRegexToken('G', matchSigned);\n    addRegexToken('g', matchSigned);\n    addRegexToken('GG', match1to2, match2);\n    addRegexToken('gg', match1to2, match2);\n    addRegexToken('GGGG', match1to4, match4);\n    addRegexToken('gggg', match1to4, match4);\n    addRegexToken('GGGGG', match1to6, match6);\n    addRegexToken('ggggg', match1to6, match6);\n\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (\n        input,\n        week,\n        config,\n        token\n    ) {\n        week[token.substr(0, 2)] = toInt(input);\n    });\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear(input) {\n        return getSetWeekYearHelper.call(\n            this,\n            input,\n            this.week(),\n            this.weekday(),\n            this.localeData()._week.dow,\n            this.localeData()._week.doy\n        );\n    }\n\n    function getSetISOWeekYear(input) {\n        return getSetWeekYearHelper.call(\n            this,\n            input,\n            this.isoWeek(),\n            this.isoWeekday(),\n            1,\n            4\n        );\n    }\n\n    function getISOWeeksInYear() {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getISOWeeksInISOWeekYear() {\n        return weeksInYear(this.isoWeekYear(), 1, 4);\n    }\n\n    function getWeeksInYear() {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getWeeksInWeekYear() {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken('Q', 0, 'Qo', 'quarter');\n\n    // ALIASES\n\n    addUnitAlias('quarter', 'Q');\n\n    // PRIORITY\n\n    addUnitPriority('quarter', 7);\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter(input) {\n        return input == null\n            ? Math.ceil((this.month() + 1) / 3)\n            : this.month((input - 1) * 3 + (this.month() % 3));\n    }\n\n    // FORMATTING\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // ALIASES\n\n    addUnitAlias('date', 'D');\n\n    // PRIORITY\n    addUnitPriority('date', 9);\n\n    // PARSING\n\n    addRegexToken('D', match1to2);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        return isStrict\n            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse\n            : locale._dayOfMonthOrdinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0]);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    // FORMATTING\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // ALIASES\n\n    addUnitAlias('dayOfYear', 'DDD');\n\n    // PRIORITY\n    addUnitPriority('dayOfYear', 4);\n\n    // PARSING\n\n    addRegexToken('DDD', match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear(input) {\n        var dayOfYear =\n            Math.round(\n                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5\n            ) + 1;\n        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // ALIASES\n\n    addUnitAlias('minute', 'm');\n\n    // PRIORITY\n\n    addUnitPriority('minute', 14);\n\n    // PARSING\n\n    addRegexToken('m', match1to2);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    // FORMATTING\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // ALIASES\n\n    addUnitAlias('second', 's');\n\n    // PRIORITY\n\n    addUnitPriority('second', 15);\n\n    // PARSING\n\n    addRegexToken('s', match1to2);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    // FORMATTING\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n    addFormatToken(0, ['SSSS', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n    // ALIASES\n\n    addUnitAlias('millisecond', 'ms');\n\n    // PRIORITY\n\n    addUnitPriority('millisecond', 16);\n\n    // PARSING\n\n    addRegexToken('S', match1to3, match1);\n    addRegexToken('SS', match1to3, match2);\n    addRegexToken('SSS', match1to3, match3);\n\n    var token, getSetMillisecond;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    }\n\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n\n    getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    // FORMATTING\n\n    addFormatToken('z', 0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr() {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName() {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var proto = Moment.prototype;\n\n    proto.add = add;\n    proto.calendar = calendar$1;\n    proto.clone = clone;\n    proto.diff = diff;\n    proto.endOf = endOf;\n    proto.format = format;\n    proto.from = from;\n    proto.fromNow = fromNow;\n    proto.to = to;\n    proto.toNow = toNow;\n    proto.get = stringGet;\n    proto.invalidAt = invalidAt;\n    proto.isAfter = isAfter;\n    proto.isBefore = isBefore;\n    proto.isBetween = isBetween;\n    proto.isSame = isSame;\n    proto.isSameOrAfter = isSameOrAfter;\n    proto.isSameOrBefore = isSameOrBefore;\n    proto.isValid = isValid$2;\n    proto.lang = lang;\n    proto.locale = locale;\n    proto.localeData = localeData;\n    proto.max = prototypeMax;\n    proto.min = prototypeMin;\n    proto.parsingFlags = parsingFlags;\n    proto.set = stringSet;\n    proto.startOf = startOf;\n    proto.subtract = subtract;\n    proto.toArray = toArray;\n    proto.toObject = toObject;\n    proto.toDate = toDate;\n    proto.toISOString = toISOString;\n    proto.inspect = inspect;\n    if (typeof Symbol !== 'undefined' && Symbol.for != null) {\n        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {\n            return 'Moment<' + this.format() + '>';\n        };\n    }\n    proto.toJSON = toJSON;\n    proto.toString = toString;\n    proto.unix = unix;\n    proto.valueOf = valueOf;\n    proto.creationData = creationData;\n    proto.eraName = getEraName;\n    proto.eraNarrow = getEraNarrow;\n    proto.eraAbbr = getEraAbbr;\n    proto.eraYear = getEraYear;\n    proto.year = getSetYear;\n    proto.isLeapYear = getIsLeapYear;\n    proto.weekYear = getSetWeekYear;\n    proto.isoWeekYear = getSetISOWeekYear;\n    proto.quarter = proto.quarters = getSetQuarter;\n    proto.month = getSetMonth;\n    proto.daysInMonth = getDaysInMonth;\n    proto.week = proto.weeks = getSetWeek;\n    proto.isoWeek = proto.isoWeeks = getSetISOWeek;\n    proto.weeksInYear = getWeeksInYear;\n    proto.weeksInWeekYear = getWeeksInWeekYear;\n    proto.isoWeeksInYear = getISOWeeksInYear;\n    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;\n    proto.date = getSetDayOfMonth;\n    proto.day = proto.days = getSetDayOfWeek;\n    proto.weekday = getSetLocaleDayOfWeek;\n    proto.isoWeekday = getSetISODayOfWeek;\n    proto.dayOfYear = getSetDayOfYear;\n    proto.hour = proto.hours = getSetHour;\n    proto.minute = proto.minutes = getSetMinute;\n    proto.second = proto.seconds = getSetSecond;\n    proto.millisecond = proto.milliseconds = getSetMillisecond;\n    proto.utcOffset = getSetOffset;\n    proto.utc = setOffsetToUTC;\n    proto.local = setOffsetToLocal;\n    proto.parseZone = setOffsetToParsedOffset;\n    proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    proto.isDST = isDaylightSavingTime;\n    proto.isLocal = isLocal;\n    proto.isUtcOffset = isUtcOffset;\n    proto.isUtc = isUtc;\n    proto.isUTC = isUtc;\n    proto.zoneAbbr = getZoneAbbr;\n    proto.zoneName = getZoneName;\n    proto.dates = deprecate(\n        'dates accessor is deprecated. Use date instead.',\n        getSetDayOfMonth\n    );\n    proto.months = deprecate(\n        'months accessor is deprecated. Use month instead',\n        getSetMonth\n    );\n    proto.years = deprecate(\n        'years accessor is deprecated. Use year instead',\n        getSetYear\n    );\n    proto.zone = deprecate(\n        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',\n        getSetZone\n    );\n    proto.isDSTShifted = deprecate(\n        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',\n        isDaylightSavingTimeShifted\n    );\n\n    function createUnix(input) {\n        return createLocal(input * 1000);\n    }\n\n    function createInZone() {\n        return createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat(string) {\n        return string;\n    }\n\n    var proto$1 = Locale.prototype;\n\n    proto$1.calendar = calendar;\n    proto$1.longDateFormat = longDateFormat;\n    proto$1.invalidDate = invalidDate;\n    proto$1.ordinal = ordinal;\n    proto$1.preparse = preParsePostFormat;\n    proto$1.postformat = preParsePostFormat;\n    proto$1.relativeTime = relativeTime;\n    proto$1.pastFuture = pastFuture;\n    proto$1.set = set;\n    proto$1.eras = localeEras;\n    proto$1.erasParse = localeErasParse;\n    proto$1.erasConvertYear = localeErasConvertYear;\n    proto$1.erasAbbrRegex = erasAbbrRegex;\n    proto$1.erasNameRegex = erasNameRegex;\n    proto$1.erasNarrowRegex = erasNarrowRegex;\n\n    proto$1.months = localeMonths;\n    proto$1.monthsShort = localeMonthsShort;\n    proto$1.monthsParse = localeMonthsParse;\n    proto$1.monthsRegex = monthsRegex;\n    proto$1.monthsShortRegex = monthsShortRegex;\n    proto$1.week = localeWeek;\n    proto$1.firstDayOfYear = localeFirstDayOfYear;\n    proto$1.firstDayOfWeek = localeFirstDayOfWeek;\n\n    proto$1.weekdays = localeWeekdays;\n    proto$1.weekdaysMin = localeWeekdaysMin;\n    proto$1.weekdaysShort = localeWeekdaysShort;\n    proto$1.weekdaysParse = localeWeekdaysParse;\n\n    proto$1.weekdaysRegex = weekdaysRegex;\n    proto$1.weekdaysShortRegex = weekdaysShortRegex;\n    proto$1.weekdaysMinRegex = weekdaysMinRegex;\n\n    proto$1.isPM = localeIsPM;\n    proto$1.meridiem = localeMeridiem;\n\n    function get$1(format, index, field, setter) {\n        var locale = getLocale(),\n            utc = createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl(format, index, field) {\n        if (isNumber(format)) {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return get$1(format, index, field, 'month');\n        }\n\n        var i,\n            out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = get$1(format, i, field, 'month');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl(localeSorted, format, index, field) {\n        if (typeof localeSorted === 'boolean') {\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        }\n\n        var locale = getLocale(),\n            shift = localeSorted ? locale._week.dow : 0,\n            i,\n            out = [];\n\n        if (index != null) {\n            return get$1(format, (index + shift) % 7, field, 'day');\n        }\n\n        for (i = 0; i < 7; i++) {\n            out[i] = get$1(format, (i + shift) % 7, field, 'day');\n        }\n        return out;\n    }\n\n    function listMonths(format, index) {\n        return listMonthsImpl(format, index, 'months');\n    }\n\n    function listMonthsShort(format, index) {\n        return listMonthsImpl(format, index, 'monthsShort');\n    }\n\n    function listWeekdays(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n    }\n\n    function listWeekdaysShort(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n    }\n\n    function listWeekdaysMin(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n    }\n\n    getSetGlobalLocale('en', {\n        eras: [\n            {\n                since: '0001-01-01',\n                until: +Infinity,\n                offset: 1,\n                name: 'Anno Domini',\n                narrow: 'AD',\n                abbr: 'AD',\n            },\n            {\n                since: '0000-12-31',\n                until: -Infinity,\n                offset: 1,\n                name: 'Before Christ',\n                narrow: 'BC',\n                abbr: 'BC',\n            },\n        ],\n        dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal: function (number) {\n            var b = number % 10,\n                output =\n                    toInt((number % 100) / 10) === 1\n                        ? 'th'\n                        : b === 1\n                        ? 'st'\n                        : b === 2\n                        ? 'nd'\n                        : b === 3\n                        ? 'rd'\n                        : 'th';\n            return number + output;\n        },\n    });\n\n    // Side effect imports\n\n    hooks.lang = deprecate(\n        'moment.lang is deprecated. Use moment.locale instead.',\n        getSetGlobalLocale\n    );\n    hooks.langData = deprecate(\n        'moment.langData is deprecated. Use moment.localeData instead.',\n        getLocale\n    );\n\n    var mathAbs = Math.abs;\n\n    function abs() {\n        var data = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days = mathAbs(this._days);\n        this._months = mathAbs(this._months);\n\n        data.milliseconds = mathAbs(data.milliseconds);\n        data.seconds = mathAbs(data.seconds);\n        data.minutes = mathAbs(data.minutes);\n        data.hours = mathAbs(data.hours);\n        data.months = mathAbs(data.months);\n        data.years = mathAbs(data.years);\n\n        return this;\n    }\n\n    function addSubtract$1(duration, input, value, direction) {\n        var other = createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days += direction * other._days;\n        duration._months += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function add$1(input, value) {\n        return addSubtract$1(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function subtract$1(input, value) {\n        return addSubtract$1(this, input, value, -1);\n    }\n\n    function absCeil(number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble() {\n        var milliseconds = this._milliseconds,\n            days = this._days,\n            months = this._months,\n            data = this._data,\n            seconds,\n            minutes,\n            hours,\n            years,\n            monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (\n            !(\n                (milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0)\n            )\n        ) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds = absFloor(milliseconds / 1000);\n        data.seconds = seconds % 60;\n\n        minutes = absFloor(seconds / 60);\n        data.minutes = minutes % 60;\n\n        hours = absFloor(minutes / 60);\n        data.hours = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days = days;\n        data.months = months;\n        data.years = years;\n\n        return this;\n    }\n\n    function daysToMonths(days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return (days * 4800) / 146097;\n    }\n\n    function monthsToDays(months) {\n        // the reverse of daysToMonths\n        return (months * 146097) / 4800;\n    }\n\n    function as(units) {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        var days,\n            months,\n            milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'quarter' || units === 'year') {\n            days = this._days + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            switch (units) {\n                case 'month':\n                    return months;\n                case 'quarter':\n                    return months / 3;\n                case 'year':\n                    return months / 12;\n            }\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case 'week':\n                    return days / 7 + milliseconds / 6048e5;\n                case 'day':\n                    return days + milliseconds / 864e5;\n                case 'hour':\n                    return days * 24 + milliseconds / 36e5;\n                case 'minute':\n                    return days * 1440 + milliseconds / 6e4;\n                case 'second':\n                    return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond':\n                    return Math.floor(days * 864e5) + milliseconds;\n                default:\n                    throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    // TODO: Use this.as('ms')?\n    function valueOf$1() {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        return (\n            this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6\n        );\n    }\n\n    function makeAs(alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms'),\n        asSeconds = makeAs('s'),\n        asMinutes = makeAs('m'),\n        asHours = makeAs('h'),\n        asDays = makeAs('d'),\n        asWeeks = makeAs('w'),\n        asMonths = makeAs('M'),\n        asQuarters = makeAs('Q'),\n        asYears = makeAs('y');\n\n    function clone$1() {\n        return createDuration(this);\n    }\n\n    function get$2(units) {\n        units = normalizeUnits(units);\n        return this.isValid() ? this[units + 's']() : NaN;\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this.isValid() ? this._data[name] : NaN;\n        };\n    }\n\n    var milliseconds = makeGetter('milliseconds'),\n        seconds = makeGetter('seconds'),\n        minutes = makeGetter('minutes'),\n        hours = makeGetter('hours'),\n        days = makeGetter('days'),\n        months = makeGetter('months'),\n        years = makeGetter('years');\n\n    function weeks() {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round,\n        thresholds = {\n            ss: 44, // a few seconds to seconds\n            s: 45, // seconds to minute\n            m: 45, // minutes to hour\n            h: 22, // hours to day\n            d: 26, // days to month/week\n            w: null, // weeks to month\n            M: 11, // months to year\n        };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {\n        var duration = createDuration(posNegDuration).abs(),\n            seconds = round(duration.as('s')),\n            minutes = round(duration.as('m')),\n            hours = round(duration.as('h')),\n            days = round(duration.as('d')),\n            months = round(duration.as('M')),\n            weeks = round(duration.as('w')),\n            years = round(duration.as('y')),\n            a =\n                (seconds <= thresholds.ss && ['s', seconds]) ||\n                (seconds < thresholds.s && ['ss', seconds]) ||\n                (minutes <= 1 && ['m']) ||\n                (minutes < thresholds.m && ['mm', minutes]) ||\n                (hours <= 1 && ['h']) ||\n                (hours < thresholds.h && ['hh', hours]) ||\n                (days <= 1 && ['d']) ||\n                (days < thresholds.d && ['dd', days]);\n\n        if (thresholds.w != null) {\n            a =\n                a ||\n                (weeks <= 1 && ['w']) ||\n                (weeks < thresholds.w && ['ww', weeks]);\n        }\n        a = a ||\n            (months <= 1 && ['M']) ||\n            (months < thresholds.M && ['MM', months]) ||\n            (years <= 1 && ['y']) || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function getSetRelativeTimeRounding(roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof roundingFunction === 'function') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function getSetRelativeTimeThreshold(threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        if (threshold === 's') {\n            thresholds.ss = limit - 1;\n        }\n        return true;\n    }\n\n    function humanize(argWithSuffix, argThresholds) {\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var withSuffix = false,\n            th = thresholds,\n            locale,\n            output;\n\n        if (typeof argWithSuffix === 'object') {\n            argThresholds = argWithSuffix;\n            argWithSuffix = false;\n        }\n        if (typeof argWithSuffix === 'boolean') {\n            withSuffix = argWithSuffix;\n        }\n        if (typeof argThresholds === 'object') {\n            th = Object.assign({}, thresholds, argThresholds);\n            if (argThresholds.s != null && argThresholds.ss == null) {\n                th.ss = argThresholds.s - 1;\n            }\n        }\n\n        locale = this.localeData();\n        output = relativeTime$1(this, !withSuffix, th, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var abs$1 = Math.abs;\n\n    function sign(x) {\n        return (x > 0) - (x < 0) || +x;\n    }\n\n    function toISOString$1() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var seconds = abs$1(this._milliseconds) / 1000,\n            days = abs$1(this._days),\n            months = abs$1(this._months),\n            minutes,\n            hours,\n            years,\n            s,\n            total = this.asSeconds(),\n            totalSign,\n            ymSign,\n            daysSign,\n            hmsSign;\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes = absFloor(seconds / 60);\n        hours = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        s = seconds ? seconds.toFixed(3).replace(/\\.?0+$/, '') : '';\n\n        totalSign = total < 0 ? '-' : '';\n        ymSign = sign(this._months) !== sign(total) ? '-' : '';\n        daysSign = sign(this._days) !== sign(total) ? '-' : '';\n        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';\n\n        return (\n            totalSign +\n            'P' +\n            (years ? ymSign + years + 'Y' : '') +\n            (months ? ymSign + months + 'M' : '') +\n            (days ? daysSign + days + 'D' : '') +\n            (hours || minutes || seconds ? 'T' : '') +\n            (hours ? hmsSign + hours + 'H' : '') +\n            (minutes ? hmsSign + minutes + 'M' : '') +\n            (seconds ? hmsSign + s + 'S' : '')\n        );\n    }\n\n    var proto$2 = Duration.prototype;\n\n    proto$2.isValid = isValid$1;\n    proto$2.abs = abs;\n    proto$2.add = add$1;\n    proto$2.subtract = subtract$1;\n    proto$2.as = as;\n    proto$2.asMilliseconds = asMilliseconds;\n    proto$2.asSeconds = asSeconds;\n    proto$2.asMinutes = asMinutes;\n    proto$2.asHours = asHours;\n    proto$2.asDays = asDays;\n    proto$2.asWeeks = asWeeks;\n    proto$2.asMonths = asMonths;\n    proto$2.asQuarters = asQuarters;\n    proto$2.asYears = asYears;\n    proto$2.valueOf = valueOf$1;\n    proto$2._bubble = bubble;\n    proto$2.clone = clone$1;\n    proto$2.get = get$2;\n    proto$2.milliseconds = milliseconds;\n    proto$2.seconds = seconds;\n    proto$2.minutes = minutes;\n    proto$2.hours = hours;\n    proto$2.days = days;\n    proto$2.weeks = weeks;\n    proto$2.months = months;\n    proto$2.years = years;\n    proto$2.humanize = humanize;\n    proto$2.toISOString = toISOString$1;\n    proto$2.toString = toISOString$1;\n    proto$2.toJSON = toISOString$1;\n    proto$2.locale = locale;\n    proto$2.localeData = localeData;\n\n    proto$2.toIsoString = deprecate(\n        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',\n        toISOString$1\n    );\n    proto$2.lang = lang;\n\n    // FORMATTING\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    //! moment.js\n\n    hooks.version = '2.28.0';\n\n    setHookCallback(createLocal);\n\n    hooks.fn = proto;\n    hooks.min = min;\n    hooks.max = max;\n    hooks.now = now;\n    hooks.utc = createUTC;\n    hooks.unix = createUnix;\n    hooks.months = listMonths;\n    hooks.isDate = isDate;\n    hooks.locale = getSetGlobalLocale;\n    hooks.invalid = createInvalid;\n    hooks.duration = createDuration;\n    hooks.isMoment = isMoment;\n    hooks.weekdays = listWeekdays;\n    hooks.parseZone = createInZone;\n    hooks.localeData = getLocale;\n    hooks.isDuration = isDuration;\n    hooks.monthsShort = listMonthsShort;\n    hooks.weekdaysMin = listWeekdaysMin;\n    hooks.defineLocale = defineLocale;\n    hooks.updateLocale = updateLocale;\n    hooks.locales = listLocales;\n    hooks.weekdaysShort = listWeekdaysShort;\n    hooks.normalizeUnits = normalizeUnits;\n    hooks.relativeTimeRounding = getSetRelativeTimeRounding;\n    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\n    hooks.calendarFormat = getCalendarFormat;\n    hooks.prototype = proto;\n\n    // currently HTML5 input type only supports 24-hour formats\n    hooks.HTML5_FMT = {\n        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type=\"datetime-local\" />\n        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type=\"datetime-local\" step=\"1\" />\n        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type=\"datetime-local\" step=\"0.001\" />\n        DATE: 'YYYY-MM-DD', // <input type=\"date\" />\n        TIME: 'HH:mm', // <input type=\"time\" />\n        TIME_SECONDS: 'HH:mm:ss', // <input type=\"time\" step=\"1\" />\n        TIME_MS: 'HH:mm:ss.SSS', // <input type=\"time\" step=\"0.001\" />\n        WEEK: 'GGGG-[W]WW', // <input type=\"week\" />\n        MONTH: 'YYYY-MM', // <input type=\"month\" />\n    };\n\n    return hooks;\n\n})));\n",
    "(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define('underscore', factory) :\n  (global = global || self, (function () {\n    var current = global._;\n    var exports = global._ = factory();\n    exports.noConflict = function () { global._ = current; return exports; };\n  }()));\n}(this, (function () {\n  //     Underscore.js 1.11.0\n  //     https://underscorejs.org\n  //     (c) 2009-2020 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n  //     Underscore may be freely distributed under the MIT license.\n\n  // Current version.\n  var VERSION = '1.11.0';\n\n  // Establish the root object, `window` (`self`) in the browser, `global`\n  // on the server, or `this` in some virtual machines. We use `self`\n  // instead of `window` for `WebWorker` support.\n  var root = typeof self == 'object' && self.self === self && self ||\n            typeof global == 'object' && global.global === global && global ||\n            Function('return this')() ||\n            {};\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype;\n  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var push = ArrayProto.push,\n      slice = ArrayProto.slice,\n      toString = ObjProto.toString,\n      hasOwnProperty = ObjProto.hasOwnProperty;\n\n  // Modern feature detection.\n  var supportsArrayBuffer = typeof ArrayBuffer !== 'undefined';\n\n  // All **ECMAScript 5+** native function implementations that we hope to use\n  // are declared here.\n  var nativeIsArray = Array.isArray,\n      nativeKeys = Object.keys,\n      nativeCreate = Object.create,\n      nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;\n\n  // Create references to these builtin functions because we override them.\n  var _isNaN = isNaN,\n      _isFinite = isFinite;\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  // The largest integer that can be represented exactly.\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n\n  // Some functions take a variable number of arguments, or a few expected\n  // arguments at the beginning and then a variable number of values to operate\n  // on. This helper accumulates all remaining arguments past the function’s\n  // argument length (or an explicit `startIndex`), into an array that becomes\n  // the last argument. Similar to ES6’s \"rest parameter\".\n  function restArguments(func, startIndex) {\n    startIndex = startIndex == null ? func.length - 1 : +startIndex;\n    return function() {\n      var length = Math.max(arguments.length - startIndex, 0),\n          rest = Array(length),\n          index = 0;\n      for (; index < length; index++) {\n        rest[index] = arguments[index + startIndex];\n      }\n      switch (startIndex) {\n        case 0: return func.call(this, rest);\n        case 1: return func.call(this, arguments[0], rest);\n        case 2: return func.call(this, arguments[0], arguments[1], rest);\n      }\n      var args = Array(startIndex + 1);\n      for (index = 0; index < startIndex; index++) {\n        args[index] = arguments[index];\n      }\n      args[startIndex] = rest;\n      return func.apply(this, args);\n    };\n  }\n\n  // Is a given variable an object?\n  function isObject(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  }\n\n  // Is a given value equal to null?\n  function isNull(obj) {\n    return obj === null;\n  }\n\n  // Is a given variable undefined?\n  function isUndefined(obj) {\n    return obj === void 0;\n  }\n\n  // Is a given value a boolean?\n  function isBoolean(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  }\n\n  // Is a given value a DOM element?\n  function isElement(obj) {\n    return !!(obj && obj.nodeType === 1);\n  }\n\n  // Internal function for creating a `toString`-based type tester.\n  function tagTester(name) {\n    return function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  }\n\n  var isString = tagTester('String');\n\n  var isNumber = tagTester('Number');\n\n  var isDate = tagTester('Date');\n\n  var isRegExp = tagTester('RegExp');\n\n  var isError = tagTester('Error');\n\n  var isSymbol = tagTester('Symbol');\n\n  var isMap = tagTester('Map');\n\n  var isWeakMap = tagTester('WeakMap');\n\n  var isSet = tagTester('Set');\n\n  var isWeakSet = tagTester('WeakSet');\n\n  var isArrayBuffer = tagTester('ArrayBuffer');\n\n  var isDataView = tagTester('DataView');\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native `Array.isArray`.\n  var isArray = nativeIsArray || tagTester('Array');\n\n  var isFunction = tagTester('Function');\n\n  // Optimize `isFunction` if appropriate. Work around some `typeof` bugs in old\n  // v8, IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\n  var nodelist = root.document && root.document.childNodes;\n  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n    isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  var isFunction$1 = isFunction;\n\n  // Internal function to check whether `key` is an own property name of `obj`.\n  function has(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  }\n\n  var isArguments = tagTester('Arguments');\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  (function() {\n    if (!isArguments(arguments)) {\n      isArguments = function(obj) {\n        return has(obj, 'callee');\n      };\n    }\n  }());\n\n  var isArguments$1 = isArguments;\n\n  // Is a given object a finite number?\n  function isFinite$1(obj) {\n    return !isSymbol(obj) && _isFinite(obj) && !isNaN(parseFloat(obj));\n  }\n\n  // Is the given value `NaN`?\n  function isNaN$1(obj) {\n    return isNumber(obj) && _isNaN(obj);\n  }\n\n  // Predicate-generating function. Often useful outside of Underscore.\n  function constant(value) {\n    return function() {\n      return value;\n    };\n  }\n\n  // Common internal logic for `isArrayLike` and `isBufferLike`.\n  function createSizePropertyCheck(getSizeProperty) {\n    return function(collection) {\n      var sizeProperty = getSizeProperty(collection);\n      return typeof sizeProperty == 'number' && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;\n    }\n  }\n\n  // Internal helper to generate a function to obtain property `key` from `obj`.\n  function shallowProperty(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  }\n\n  // Internal helper to obtain the `byteLength` property of an object.\n  var getByteLength = shallowProperty('byteLength');\n\n  // Internal helper to determine whether we should spend extensive checks against\n  // `ArrayBuffer` et al.\n  var isBufferLike = createSizePropertyCheck(getByteLength);\n\n  // Is a given value a typed array?\n  var typedArrayPattern = /\\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\\]/;\n  function isTypedArray(obj) {\n    // `ArrayBuffer.isView` is the most future-proof, so use it when available.\n    // Otherwise, fall back on the above regular expression.\n    return nativeIsView ? (nativeIsView(obj) && !isDataView(obj)) :\n                  isBufferLike(obj) && typedArrayPattern.test(toString.call(obj));\n  }\n\n  var isTypedArray$1 = supportsArrayBuffer ? isTypedArray : constant(false);\n\n  // Internal helper to obtain the `length` property of an object.\n  var getLength = shallowProperty('length');\n\n  // Internal helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object.\n  // Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var isArrayLike = createSizePropertyCheck(getLength);\n\n  // Internal helper to create a simple lookup structure.\n  // `collectNonEnumProps` used to depend on `_.contains`, but this led to\n  // circular imports. `emulatedSet` is a one-off solution that only works for\n  // arrays of strings.\n  function emulatedSet(keys) {\n    var hash = {};\n    for (var l = keys.length, i = 0; i < l; ++i) hash[keys[i]] = true;\n    return {\n      contains: function(key) { return hash[key]; },\n      push: function(key) {\n        hash[key] = true;\n        return keys.push(key);\n      }\n    };\n  }\n\n  // Internal helper. Checks `keys` for the presence of keys in IE < 9 that won't\n  // be iterated by `for key in ...` and thus missed. Extends `keys` in place if\n  // needed.\n  function collectNonEnumProps(obj, keys) {\n    keys = emulatedSet(keys);\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = isFunction$1(constructor) && constructor.prototype || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (has(obj, prop) && !keys.contains(prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !keys.contains(prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`.\n  function keys(obj) {\n    if (!isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  }\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  function isEmpty(obj) {\n    if (obj == null) return true;\n    // Skip the more expensive `toString`-based type checks if `obj` has no\n    // `.length`.\n    if (isArrayLike(obj) && (isArray(obj) || isString(obj) || isArguments$1(obj))) return obj.length === 0;\n    return keys(obj).length === 0;\n  }\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  function isMatch(object, attrs) {\n    var _keys = keys(attrs), length = _keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = _keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  }\n\n  // If Underscore is called as a function, it returns a wrapped object that can\n  // be used OO-style. This wrapper holds altered versions of all functions added\n  // through `_.mixin`. Wrapped objects may be chained.\n  function _(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  }\n\n  _.VERSION = VERSION;\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxies for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return String(this._wrapped);\n  };\n\n  // Internal recursive comparison function for `_.isEqual`.\n  function eq(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // `null` or `undefined` only equal to itself (strict comparison).\n    if (a == null || b == null) return false;\n    // `NaN`s are equivalent, but non-reflexive.\n    if (a !== a) return b !== b;\n    // Exhaust primitive checks\n    var type = typeof a;\n    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n    return deepEq(a, b, aStack, bStack);\n  }\n\n  // Internal recursive comparison function for `_.isEqual`.\n  function deepEq(a, b, aStack, bStack) {\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // These types are compared by value.\n      case '[object RegExp]':\n        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN.\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n      case '[object Symbol]':\n        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n      case '[object ArrayBuffer]':\n        // Coerce to `DataView` so we can fall through to the next case.\n        return deepEq(new DataView(a), new DataView(b), aStack, bStack);\n      case '[object DataView]':\n        var byteLength = getByteLength(a);\n        if (byteLength !== getByteLength(b)) {\n          return false;\n        }\n        while (byteLength--) {\n          if (a.getUint8(byteLength) !== b.getUint8(byteLength)) {\n            return false;\n          }\n        }\n        return true;\n    }\n\n    if (isTypedArray$1(a)) {\n      // Coerce typed arrays to `DataView`.\n      return deepEq(new DataView(a.buffer), new DataView(b.buffer), aStack, bStack);\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(isFunction$1(aCtor) && aCtor instanceof aCtor &&\n                               isFunction$1(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var _keys = keys(a), key;\n      length = _keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = _keys[length];\n        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  }\n\n  // Perform a deep comparison to check if two objects are equal.\n  function isEqual(a, b) {\n    return eq(a, b);\n  }\n\n  // Retrieve all the enumerable property names of an object.\n  function allKeys(obj) {\n    if (!isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  }\n\n  // Retrieve the values of an object's properties.\n  function values(obj) {\n    var _keys = keys(obj);\n    var length = _keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[_keys[i]];\n    }\n    return values;\n  }\n\n  // Convert an object into a list of `[key, value]` pairs.\n  // The opposite of `_.object` with one argument.\n  function pairs(obj) {\n    var _keys = keys(obj);\n    var length = _keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [_keys[i], obj[_keys[i]]];\n    }\n    return pairs;\n  }\n\n  // Invert the keys and values of an object. The values must be serializable.\n  function invert(obj) {\n    var result = {};\n    var _keys = keys(obj);\n    for (var i = 0, length = _keys.length; i < length; i++) {\n      result[obj[_keys[i]]] = _keys[i];\n    }\n    return result;\n  }\n\n  // Return a sorted list of the function names available on the object.\n  function functions(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (isFunction$1(obj[key])) names.push(key);\n    }\n    return names.sort();\n  }\n\n  // An internal function for creating assigner functions.\n  function createAssigner(keysFunc, defaults) {\n    return function(obj) {\n      var length = arguments.length;\n      if (defaults) obj = Object(obj);\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!defaults || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  }\n\n  // Extend a given object with all the properties in passed-in object(s).\n  var extend = createAssigner(allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in\n  // object(s).\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  var extendOwn = createAssigner(keys);\n\n  // Fill in a given object with default properties.\n  var defaults = createAssigner(allKeys, true);\n\n  // Create a naked function reference for surrogate-prototype-swapping.\n  function ctor() {\n    return function(){};\n  }\n\n  // An internal function for creating a new object that inherits from another.\n  function baseCreate(prototype) {\n    if (!isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    var Ctor = ctor();\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  }\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  function create(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) extendOwn(result, props);\n    return result;\n  }\n\n  // Create a (shallow-cloned) duplicate of an object.\n  function clone(obj) {\n    if (!isObject(obj)) return obj;\n    return isArray(obj) ? obj.slice() : extend({}, obj);\n  }\n\n  // Invokes `interceptor` with the `obj` and then returns `obj`.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  function tap(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  }\n\n  // Shortcut function for checking if an object has a given property directly on\n  // itself (in other words, not on a prototype). Unlike the internal `has`\n  // function, this public version can also traverse nested properties.\n  function has$1(obj, path) {\n    if (!isArray(path)) {\n      return has(obj, path);\n    }\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      var key = path[i];\n      if (obj == null || !hasOwnProperty.call(obj, key)) {\n        return false;\n      }\n      obj = obj[key];\n    }\n    return !!length;\n  }\n\n  // Keep the identity function around for default iteratees.\n  function identity(value) {\n    return value;\n  }\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  function matcher(attrs) {\n    attrs = extendOwn({}, attrs);\n    return function(obj) {\n      return isMatch(obj, attrs);\n    };\n  }\n\n  // Internal function to obtain a nested property in `obj` along `path`.\n  function deepGet(obj, path) {\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      if (obj == null) return void 0;\n      obj = obj[path[i]];\n    }\n    return length ? obj : void 0;\n  }\n\n  // Creates a function that, when passed an object, will traverse that object’s\n  // properties down the given `path`, specified as an array of keys or indices.\n  function property(path) {\n    if (!isArray(path)) {\n      return shallowProperty(path);\n    }\n    return function(obj) {\n      return deepGet(obj, path);\n    };\n  }\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  function optimizeCb(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      // The 2-argument case is omitted because we’re not using it.\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  }\n\n  // An internal function to generate callbacks that can be applied to each\n  // element in a collection, returning the desired result — either `_.identity`,\n  // an arbitrary callback, a property matcher, or a property accessor.\n  function baseIteratee(value, context, argCount) {\n    if (value == null) return identity;\n    if (isFunction$1(value)) return optimizeCb(value, context, argCount);\n    if (isObject(value) && !isArray(value)) return matcher(value);\n    return property(value);\n  }\n\n  // External wrapper for our callback generator. Users may customize\n  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n  // This abstraction hides the internal-only `argCount` argument.\n  function iteratee(value, context) {\n    return baseIteratee(value, context, Infinity);\n  }\n  _.iteratee = iteratee;\n\n  // The function we call internally to generate a callback. It invokes\n  // `_.iteratee` if overridden, otherwise `baseIteratee`.\n  function cb(value, context, argCount) {\n    if (_.iteratee !== iteratee) return _.iteratee(value, context);\n    return baseIteratee(value, context, argCount);\n  }\n\n  // Returns the results of applying the `iteratee` to each element of `obj`.\n  // In contrast to `_.map` it returns an object.\n  function mapObject(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var _keys = keys(obj),\n        length = _keys.length,\n        results = {};\n    for (var index = 0; index < length; index++) {\n      var currentKey = _keys[index];\n      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  }\n\n  // Predicate-generating function. Often useful outside of Underscore.\n  function noop(){}\n\n  // Generates a function for a given object that returns a given property.\n  function propertyOf(obj) {\n    if (obj == null) {\n      return function(){};\n    }\n    return function(path) {\n      return !isArray(path) ? obj[path] : deepGet(obj, path);\n    };\n  }\n\n  // Run a function **n** times.\n  function times(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  }\n\n  // Return a random integer between `min` and `max` (inclusive).\n  function random(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  }\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  var now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n  // Internal helper to generate functions for escaping and unescaping strings\n  // to/from HTML interpolation.\n  function createEscaper(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped.\n    var source = '(?:' + keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  }\n\n  // Internal list of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n\n  // Function for escaping strings to HTML interpolation.\n  var _escape = createEscaper(escapeMap);\n\n  // Internal list of HTML entities for unescaping.\n  var unescapeMap = invert(escapeMap);\n\n  // Function for unescaping strings from HTML interpolation.\n  var _unescape = createEscaper(unescapeMap);\n\n  // By default, Underscore uses ERB-style template delimiters. Change the\n  // following template settings to use alternative delimiters.\n  var templateSettings = _.templateSettings = {\n    evaluate: /<%([\\s\\S]+?)%>/g,\n    interpolate: /<%=([\\s\\S]+?)%>/g,\n    escape: /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `_.templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\": \"'\",\n    '\\\\': '\\\\',\n    '\\r': 'r',\n    '\\n': 'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  function escapeChar(match) {\n    return '\\\\' + escapes[match];\n  }\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  function template(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offset.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    var render;\n    try {\n      render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  }\n\n  // Traverses the children of `obj` along `path`. If a child is a function, it\n  // is invoked with its parent as context. Returns the value of the final\n  // child, or `fallback` if any child is undefined.\n  function result(obj, path, fallback) {\n    if (!isArray(path)) path = [path];\n    var length = path.length;\n    if (!length) {\n      return isFunction$1(fallback) ? fallback.call(obj) : fallback;\n    }\n    for (var i = 0; i < length; i++) {\n      var prop = obj == null ? void 0 : obj[path[i]];\n      if (prop === void 0) {\n        prop = fallback;\n        i = length; // Ensure we don't continue iterating.\n      }\n      obj = isFunction$1(prop) ? prop.call(obj) : prop;\n    }\n    return obj;\n  }\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  function uniqueId(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  }\n\n  // Start chaining a wrapped Underscore object.\n  function chain(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  }\n\n  // Internal function to execute `sourceFunc` bound to `context` with optional\n  // `args`. Determines whether to execute a function as a constructor or as a\n  // normal function.\n  function executeBound(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (isObject(result)) return result;\n    return self;\n  }\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. `_` acts\n  // as a placeholder by default, allowing any combination of arguments to be\n  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\n  var partial = restArguments(function(func, boundArgs) {\n    var placeholder = partial.placeholder;\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  });\n\n  partial.placeholder = _;\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally).\n  var bind = restArguments(function(func, context, args) {\n    if (!isFunction$1(func)) throw new TypeError('Bind must be called on a function');\n    var bound = restArguments(function(callArgs) {\n      return executeBound(func, bound, context, this, args.concat(callArgs));\n    });\n    return bound;\n  });\n\n  // Internal implementation of a recursive `flatten` function.\n  function flatten(input, depth, strict, output) {\n    output = output || [];\n    if (!depth && depth !== 0) {\n      depth = Infinity;\n    } else if (depth <= 0) {\n      return output.concat(input);\n    }\n    var idx = output.length;\n    for (var i = 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (isArray(value) || isArguments$1(value))) {\n        // Flatten current level of array or arguments object.\n        if (depth > 1) {\n          flatten(value, depth - 1, strict, output);\n          idx = output.length;\n        } else {\n          var j = 0, len = value.length;\n          while (j < len) output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  }\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  var bindAll = restArguments(function(obj, keys) {\n    keys = flatten(keys, false, false);\n    var index = keys.length;\n    if (index < 1) throw new Error('bindAll must be passed function names');\n    while (index--) {\n      var key = keys[index];\n      obj[key] = bind(obj[key], obj);\n    }\n    return obj;\n  });\n\n  // Memoize an expensive function by storing its results.\n  function memoize(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  }\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  var delay = restArguments(function(func, wait, args) {\n    return setTimeout(function() {\n      return func.apply(null, args);\n    }, wait);\n  });\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  var defer = partial(delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  function throttle(func, wait, options) {\n    var timeout, context, args, result;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function() {\n      previous = options.leading === false ? 0 : now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function() {\n      var _now = now();\n      if (!previous && options.leading === false) previous = _now;\n      var remaining = wait - (_now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = _now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n\n    throttled.cancel = function() {\n      clearTimeout(timeout);\n      previous = 0;\n      timeout = context = args = null;\n    };\n\n    return throttled;\n  }\n\n  // When a sequence of calls of the returned function ends, the argument\n  // function is triggered. The end of a sequence is defined by the `wait`\n  // parameter. If `immediate` is passed, the argument function will be\n  // triggered at the beginning of the sequence instead of at the end.\n  function debounce(func, wait, immediate) {\n    var timeout, result;\n\n    var later = function(context, args) {\n      timeout = null;\n      if (args) result = func.apply(context, args);\n    };\n\n    var debounced = restArguments(function(args) {\n      if (timeout) clearTimeout(timeout);\n      if (immediate) {\n        var callNow = !timeout;\n        timeout = setTimeout(later, wait);\n        if (callNow) result = func.apply(this, args);\n      } else {\n        timeout = delay(later, wait, this, args);\n      }\n\n      return result;\n    });\n\n    debounced.cancel = function() {\n      clearTimeout(timeout);\n      timeout = null;\n    };\n\n    return debounced;\n  }\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  function wrap(func, wrapper) {\n    return partial(wrapper, func);\n  }\n\n  // Returns a negated version of the passed-in predicate.\n  function negate(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  }\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  function compose() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  }\n\n  // Returns a function that will only be executed on and after the Nth call.\n  function after(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  }\n\n  // Returns a function that will only be executed up to (but not including) the\n  // Nth call.\n  function before(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  }\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  var once = partial(before, 2);\n\n  // Returns the first key on an object that passes a truth test.\n  function findKey(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var _keys = keys(obj), key;\n    for (var i = 0, length = _keys.length; i < length; i++) {\n      key = _keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  }\n\n  // Internal function to generate `_.findIndex` and `_.findLastIndex`.\n  function createPredicateIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a truth test.\n  var findIndex = createPredicateIndexFinder(1);\n\n  // Returns the last index on an array-like that passes a truth test.\n  var findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  function sortedIndex(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  }\n\n  // Internal function to generate the `_.indexOf` and `_.lastIndexOf` functions.\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n          i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), isNaN$1);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  }\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  var indexOf = createIndexFinder(1, findIndex, sortedIndex);\n\n  // Return the position of the last occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  var lastIndexOf = createIndexFinder(-1, findLastIndex);\n\n  // Return the first value which passes a truth test.\n  function find(obj, predicate, context) {\n    var keyFinder = isArrayLike(obj) ? findIndex : findKey;\n    var key = keyFinder(obj, predicate, context);\n    if (key !== void 0 && key !== -1) return obj[key];\n  }\n\n  // Convenience version of a common use case of `_.find`: getting the first\n  // object containing specific `key:value` pairs.\n  function findWhere(obj, attrs) {\n    return find(obj, matcher(attrs));\n  }\n\n  // The cornerstone for collection functions, an `each`\n  // implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  function each(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var _keys = keys(obj);\n      for (i = 0, length = _keys.length; i < length; i++) {\n        iteratee(obj[_keys[i]], _keys[i], obj);\n      }\n    }\n    return obj;\n  }\n\n  // Return the results of applying the iteratee to each element.\n  function map(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var _keys = !isArrayLike(obj) && keys(obj),\n        length = (_keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = _keys ? _keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  }\n\n  // Internal helper to create a reducing function, iterating left or right.\n  function createReduce(dir) {\n    // Wrap code that reassigns argument variables in a separate function than\n    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n    var reducer = function(obj, iteratee, memo, initial) {\n      var _keys = !isArrayLike(obj) && keys(obj),\n          length = (_keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      if (!initial) {\n        memo = obj[_keys ? _keys[index] : index];\n        index += dir;\n      }\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = _keys ? _keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    };\n\n    return function(obj, iteratee, memo, context) {\n      var initial = arguments.length >= 3;\n      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  var reduce = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  var reduceRight = createReduce(-1);\n\n  // Return all the elements that pass a truth test.\n  function filter(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  }\n\n  // Return all the elements for which a truth test fails.\n  function reject(obj, predicate, context) {\n    return filter(obj, negate(cb(predicate)), context);\n  }\n\n  // Determine whether all of the elements pass a truth test.\n  function every(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var _keys = !isArrayLike(obj) && keys(obj),\n        length = (_keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = _keys ? _keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  }\n\n  // Determine if at least one element in the object passes a truth test.\n  function some(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var _keys = !isArrayLike(obj) && keys(obj),\n        length = (_keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = _keys ? _keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  }\n\n  // Determine if the array or object contains a given item (using `===`).\n  function contains(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return indexOf(obj, item, fromIndex) >= 0;\n  }\n\n  // Invoke a method (with arguments) on every item in a collection.\n  var invoke = restArguments(function(obj, path, args) {\n    var contextPath, func;\n    if (isFunction$1(path)) {\n      func = path;\n    } else if (isArray(path)) {\n      contextPath = path.slice(0, -1);\n      path = path[path.length - 1];\n    }\n    return map(obj, function(context) {\n      var method = func;\n      if (!method) {\n        if (contextPath && contextPath.length) {\n          context = deepGet(context, contextPath);\n        }\n        if (context == null) return void 0;\n        method = context[path];\n      }\n      return method == null ? method : method.apply(context, args);\n    });\n  });\n\n  // Convenience version of a common use case of `_.map`: fetching a property.\n  function pluck(obj, key) {\n    return map(obj, property(key));\n  }\n\n  // Convenience version of a common use case of `_.filter`: selecting only\n  // objects containing specific `key:value` pairs.\n  function where(obj, attrs) {\n    return filter(obj, matcher(attrs));\n  }\n\n  // Return the maximum element (or element-based computation).\n  function max(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  }\n\n  // Return the minimum element (or element-based computation).\n  function min(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  }\n\n  // Sample **n** random values from a collection using the modern version of the\n  // [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `_.map`.\n  function sample(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = values(obj);\n      return obj[random(obj.length - 1)];\n    }\n    var sample = isArrayLike(obj) ? clone(obj) : values(obj);\n    var length = getLength(sample);\n    n = Math.max(Math.min(n, length), 0);\n    var last = length - 1;\n    for (var index = 0; index < n; index++) {\n      var rand = random(index, last);\n      var temp = sample[index];\n      sample[index] = sample[rand];\n      sample[rand] = temp;\n    }\n    return sample.slice(0, n);\n  }\n\n  // Shuffle a collection.\n  function shuffle(obj) {\n    return sample(obj, Infinity);\n  }\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  function sortBy(obj, iteratee, context) {\n    var index = 0;\n    iteratee = cb(iteratee, context);\n    return pluck(map(obj, function(value, key, list) {\n      return {\n        value: value,\n        index: index++,\n        criteria: iteratee(value, key, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  }\n\n  // An internal function used for aggregate \"group by\" operations.\n  function group(behavior, partition) {\n    return function(obj, iteratee, context) {\n      var result = partition ? [[], []] : {};\n      iteratee = cb(iteratee, context);\n      each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  }\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  var groupBy = group(function(result, value, key) {\n    if (has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `_.groupBy`, but for\n  // when you know that your index values will be unique.\n  var indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  var countBy = group(function(result, value, key) {\n    if (has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Split a collection into two arrays: one whose elements all pass the given\n  // truth test, and one whose elements all do not pass the truth test.\n  var partition = group(function(result, value, pass) {\n    result[pass ? 0 : 1].push(value);\n  }, true);\n\n  // Safely create a real, live array from anything iterable.\n  var reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\n  function toArray(obj) {\n    if (!obj) return [];\n    if (isArray(obj)) return slice.call(obj);\n    if (isString(obj)) {\n      // Keep surrogate pair characters together.\n      return obj.match(reStrSymbol);\n    }\n    if (isArrayLike(obj)) return map(obj, identity);\n    return values(obj);\n  }\n\n  // Return the number of elements in a collection.\n  function size(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : keys(obj).length;\n  }\n\n  // Internal `_.pick` helper function to determine whether `key` is an enumerable\n  // property name of `obj`.\n  function keyInObj(value, key, obj) {\n    return key in obj;\n  }\n\n  // Return a copy of the object only containing the allowed properties.\n  var pick = restArguments(function(obj, keys) {\n    var result = {}, iteratee = keys[0];\n    if (obj == null) return result;\n    if (isFunction$1(iteratee)) {\n      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\n      keys = allKeys(obj);\n    } else {\n      iteratee = keyInObj;\n      keys = flatten(keys, false, false);\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  });\n\n  // Return a copy of the object without the disallowed properties.\n  var omit = restArguments(function(obj, keys) {\n    var iteratee = keys[0], context;\n    if (isFunction$1(iteratee)) {\n      iteratee = negate(iteratee);\n      if (keys.length > 1) context = keys[1];\n    } else {\n      keys = map(flatten(keys, false, false), String);\n      iteratee = function(value, key) {\n        return !contains(keys, key);\n      };\n    }\n    return pick(obj, iteratee, context);\n  });\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  function initial(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  }\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. The **guard** check allows it to work with `_.map`.\n  function first(array, n, guard) {\n    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];\n    if (n == null || guard) return array[0];\n    return initial(array, array.length - n);\n  }\n\n  // Returns everything but the first entry of the `array`. Especially useful on\n  // the `arguments` object. Passing an **n** will return the rest N values in the\n  // `array`.\n  function rest(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  }\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  function last(array, n, guard) {\n    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];\n    if (n == null || guard) return array[array.length - 1];\n    return rest(array, Math.max(0, array.length - n));\n  }\n\n  // Trim out all falsy values from an array.\n  function compact(array) {\n    return filter(array, Boolean);\n  }\n\n  // Flatten out an array, either recursively (by default), or up to `depth`.\n  // Passing `true` or `false` as `depth` means `1` or `Infinity`, respectively.\n  function flatten$1(array, depth) {\n    return flatten(array, depth, false);\n  }\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  var difference = restArguments(function(array, rest) {\n    rest = flatten(rest, true, true);\n    return filter(array, function(value){\n      return !contains(rest, value);\n    });\n  });\n\n  // Return a version of the array that does not contain the specified value(s).\n  var without = restArguments(function(array, otherArrays) {\n    return difference(array, otherArrays);\n  });\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // The faster algorithm will not work with an iteratee if the iteratee\n  // is not a one-to-one function, so providing an iteratee will disable\n  // the faster algorithm.\n  function uniq(array, isSorted, iteratee, context) {\n    if (!isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted && !iteratee) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  var union = restArguments(function(arrays) {\n    return uniq(flatten(arrays, true, true));\n  });\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  function intersection(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (contains(result, item)) continue;\n      var j;\n      for (j = 1; j < argsLength; j++) {\n        if (!contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  }\n\n  // Complement of zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices.\n  function unzip(array) {\n    var length = array && max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = pluck(array, index);\n    }\n    return result;\n  }\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  var zip = restArguments(unzip);\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values. Passing by pairs is the reverse of `_.pairs`.\n  function object(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  }\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](https://docs.python.org/library/functions.html#range).\n  function range(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    if (!step) {\n      step = stop < start ? -1 : 1;\n    }\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  }\n\n  // Chunk a single array into multiple arrays, each containing `count` or fewer\n  // items.\n  function chunk(array, count) {\n    if (count == null || count < 1) return [];\n    var result = [];\n    var i = 0, length = array.length;\n    while (i < length) {\n      result.push(slice.call(array, i, i += count));\n    }\n    return result;\n  }\n\n  // Helper function to continue chaining intermediate results.\n  function chainResult(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  }\n\n  // Add your own custom functions to the Underscore object.\n  function mixin(obj) {\n    each(functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return chainResult(this, func.apply(_, args));\n      };\n    });\n    return _;\n  }\n\n  // Add all mutator `Array` functions to the wrapper.\n  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      if (obj != null) {\n        method.apply(obj, arguments);\n        if ((name === 'shift' || name === 'splice') && obj.length === 0) {\n          delete obj[0];\n        }\n      }\n      return chainResult(this, obj);\n    };\n  });\n\n  // Add all accessor `Array` functions to the wrapper.\n  each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      if (obj != null) obj = method.apply(obj, arguments);\n      return chainResult(this, obj);\n    };\n  });\n\n  // Named Exports\n\n  var allExports = {\n    __proto__: null,\n    VERSION: VERSION,\n    restArguments: restArguments,\n    isObject: isObject,\n    isNull: isNull,\n    isUndefined: isUndefined,\n    isBoolean: isBoolean,\n    isElement: isElement,\n    isString: isString,\n    isNumber: isNumber,\n    isDate: isDate,\n    isRegExp: isRegExp,\n    isError: isError,\n    isSymbol: isSymbol,\n    isMap: isMap,\n    isWeakMap: isWeakMap,\n    isSet: isSet,\n    isWeakSet: isWeakSet,\n    isArrayBuffer: isArrayBuffer,\n    isDataView: isDataView,\n    isArray: isArray,\n    isFunction: isFunction$1,\n    isArguments: isArguments$1,\n    isFinite: isFinite$1,\n    isNaN: isNaN$1,\n    isTypedArray: isTypedArray$1,\n    isEmpty: isEmpty,\n    isMatch: isMatch,\n    isEqual: isEqual,\n    keys: keys,\n    allKeys: allKeys,\n    values: values,\n    pairs: pairs,\n    invert: invert,\n    functions: functions,\n    methods: functions,\n    extend: extend,\n    extendOwn: extendOwn,\n    assign: extendOwn,\n    defaults: defaults,\n    create: create,\n    clone: clone,\n    tap: tap,\n    has: has$1,\n    mapObject: mapObject,\n    identity: identity,\n    constant: constant,\n    noop: noop,\n    property: property,\n    propertyOf: propertyOf,\n    matcher: matcher,\n    matches: matcher,\n    times: times,\n    random: random,\n    now: now,\n    escape: _escape,\n    unescape: _unescape,\n    templateSettings: templateSettings,\n    template: template,\n    result: result,\n    uniqueId: uniqueId,\n    chain: chain,\n    iteratee: iteratee,\n    partial: partial,\n    bind: bind,\n    bindAll: bindAll,\n    memoize: memoize,\n    delay: delay,\n    defer: defer,\n    throttle: throttle,\n    debounce: debounce,\n    wrap: wrap,\n    negate: negate,\n    compose: compose,\n    after: after,\n    before: before,\n    once: once,\n    findKey: findKey,\n    findIndex: findIndex,\n    findLastIndex: findLastIndex,\n    sortedIndex: sortedIndex,\n    indexOf: indexOf,\n    lastIndexOf: lastIndexOf,\n    find: find,\n    detect: find,\n    findWhere: findWhere,\n    each: each,\n    forEach: each,\n    map: map,\n    collect: map,\n    reduce: reduce,\n    foldl: reduce,\n    inject: reduce,\n    reduceRight: reduceRight,\n    foldr: reduceRight,\n    filter: filter,\n    select: filter,\n    reject: reject,\n    every: every,\n    all: every,\n    some: some,\n    any: some,\n    contains: contains,\n    includes: contains,\n    include: contains,\n    invoke: invoke,\n    pluck: pluck,\n    where: where,\n    max: max,\n    min: min,\n    shuffle: shuffle,\n    sample: sample,\n    sortBy: sortBy,\n    groupBy: groupBy,\n    indexBy: indexBy,\n    countBy: countBy,\n    partition: partition,\n    toArray: toArray,\n    size: size,\n    pick: pick,\n    omit: omit,\n    first: first,\n    head: first,\n    take: first,\n    initial: initial,\n    last: last,\n    rest: rest,\n    tail: rest,\n    drop: rest,\n    compact: compact,\n    flatten: flatten$1,\n    without: without,\n    uniq: uniq,\n    unique: uniq,\n    union: union,\n    intersection: intersection,\n    difference: difference,\n    unzip: unzip,\n    transpose: unzip,\n    zip: zip,\n    object: object,\n    range: range,\n    chunk: chunk,\n    mixin: mixin,\n    'default': _\n  };\n\n  // Default Export\n\n  // Add all of the Underscore functions to the wrapper object.\n  var _$1 = mixin(allExports);\n  // Legacy Node.js API.\n  _$1._ = _$1;\n\n  return _$1;\n\n})));\n//# sourceMappingURL=underscore.js.map\n",
    "/*\n    Main function and entry point\n    Can be registered to a videojs instance as a plugin\n*/\n\nmodule.exports = videojs => {\n  require('./lib/polyfills');\n\n  const Plugin = videojs.getPlugin('plugin');\n  const Utils = require('./lib/utils');\n  const Controls = require('./components/controls');\n  const AnnotationState = require('./components/annotation_state');\n  const EventDispatcher = require('./lib/event_dispatcher');\n\n  const DEFAULT_OPTIONS = Object.freeze({\n    bindArrowKeys: true,\n    meta: { user_id: null, user_name: null },\n    annotationsObjects: [],\n    showControls: true,\n    showCommentList: true,\n    showFullScreen: true,\n    showMarkerShapeAndTooltips: true,\n    internalCommenting: true,\n    startInAnnotationMode: false\n  });\n\n  return class AnnotationComments extends Plugin {\n    constructor(player, options) {\n      options = Object.assign(Utils.cloneObject(DEFAULT_OPTIONS), options);\n      super(player, options);\n\n      this.eventDispatcher = new EventDispatcher();\n      this.eventDispatcher.registerListenersFor(this, 'AnnotationComments');\n\n      this.player = player;\n      this.meta = options.meta;\n      this.options = options;\n\n      this._readyCallbacks = [];\n\n      // Assign reference to this class to player for access later by components where needed\n      player.annotationComments = () => {\n        return this;\n      };\n\n      // Assert that components are initialized AFTER metadata + play data is loaded so we metadata/duration\n      // NOTE - this check is required because player loadeddata doesn't always fire if readystate is > 3\n      if (player.readyState() >= 3) {\n        this.postLoadDataConstructor();\n      } else {\n        player.on('loadeddata', this.postLoadDataConstructor.bind(this));\n      }\n    }\n\n    // Additional init/setup after video data + metadata is available\n    postLoadDataConstructor() {\n      // setup initial state and render UI\n      this.annotationState = new AnnotationState(this.player);\n      this.annotationState.annotations = this.options.annotationsObjects;\n\n      this.controls = new Controls(this.player, this.options.bindArrowKeys);\n      this.bindEvents();\n      this.setBounds(false);\n      if (this.options.startInAnnotationMode) this.toggleAnnotationMode();\n\n      this.pluginReady();\n    }\n\n    // Bind needed events for interaction w/ components\n    bindEvents() {\n      // Set player boundaries on window size change or fullscreen change\n      $(window).on('resize.vac-window-resize', Utils.throttle(this.setBounds.bind(this), 500));\n      this.player.on('fullscreenchange', Utils.throttle(this.setBounds.bind(this), 500));\n\n      // Remove annotation features on fullscreen if showFullScreen: false\n      if (!this.options.showFullScreen) {\n        this.player.on('fullscreenchange', () => {\n          if (this.player.isFullscreen_) {\n            this.preFullscreenAnnotationsEnabled = this.active;\n            $(this.player.el()).addClass('vac-disable-fullscreen');\n          } else {\n            $(this.player.el()).removeClass('vac-disable-fullscreen');\n          }\n          if (this.preFullscreenAnnotationsEnabled) {\n            // If we were previously in annotation mode (pre-fullscreen) or entering fullscreeen and are\n            // in annotation mode, toggle the mode\n            this.toggleAnnotationMode();\n          }\n        });\n      }\n    }\n\n    // A wrapper func to make it easier to use EventDispatcher from the client\n    // Ex: plugin.fire(type, data);\n    fire(type, data = {}) {\n      this.eventDispatcher.fire(type, data);\n    }\n\n    // A wrapper func to make it easier to listen to API events from the client\n    registerListener(type, callback) {\n      this.eventDispatcher.registerListener(type, callback, false);\n    }\n\n    // Toggle annotations mode on/off\n    toggleAnnotationMode() {\n      this.active = !this.active;\n      this.player.toggleClass('vac-active'); // Toggle global class to player to toggle display of elements\n      this.annotationState.enabled = this.active;\n\n      if (this.active) {\n        this.fire('annotationModeEnabled');\n      } else {\n        this.fire('annotationModeDisabled');\n      }\n\n      // Handle control component UI if showControls: true\n      if (this.options.showControls) {\n        if (!this.active) {\n          this.controls.clear(true);\n        } else {\n          this.controls.render();\n        }\n      }\n    }\n\n    // Set player UI boundaries\n    setBounds(triggerChange = true) {\n      this.bounds = {};\n      const $player = $(this.player.el());\n      const $ctrls = $player.find('.vjs-control-bar');\n\n      this.bounds.left = $player.offset().left;\n      this.bounds.top = $player.offset().top;\n      this.bounds.right = this.bounds.left + $player.width();\n      this.bounds.bottom = this.bounds.top + $player.height();\n      this.bounds.bottomWithoutControls = this.bounds.bottom - $ctrls.height();\n\n      // fires an event when bounds have changed during resizing\n      if (triggerChange) this.fire('playerBoundsChanged', this.bounds);\n    }\n\n    // Public function to register a callback for when plugin is ready\n    onReady(callback) {\n      if (this.eventDispatcher.pluginReady) {\n        return callback();\n      }\n      this._readyCallbacks.push(callback);\n    }\n\n    // Mark plugin as ready and fire any pending callbacks\n    pluginReady() {\n      this.eventDispatcher.pluginReady = true;\n      while (this._readyCallbacks.length) {\n        this._readyCallbacks.pop()();\n      }\n    }\n\n    // Teardown all components, remove all listeners, and remove elements from DOM\n    dispose() {\n      this.controls = this.controls.teardown();\n      this.annotationState = this.annotationState.teardown();\n      this.eventDispatcher = this.eventDispatcher.teardown();\n      this.teardown();\n      if (this.player) {\n        this.player.annotationComments = null;\n        $(this.player.el()).removeClass('vac-active');\n        $(this.player.el())\n          .find(\"[class^='vac-']\")\n          .remove();\n      }\n      super.dispose();\n    }\n\n    teardown() {\n      if (this.player) this.player.off('fullscreenchange');\n      $(window).off('resize.vac-window-resize');\n    }\n  };\n};\n",
    "var Handlebars = require(\"handlebars/runtime\");\n exports[\"templates\"] = exports[\"templates\"] || {};\nexports[\"templates\"][\"comment\"] = Handlebars.template({\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=\"function\", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"<div class=\\\"vac-comment\\\" data-id=\\\"\"\n    + alias4(((helper = (helper = lookupProperty(helpers,\"id\") || (depth0 != null ? lookupProperty(depth0,\"id\") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":1,\"column\":34},\"end\":{\"line\":1,\"column\":40}}}) : helper)))\n    + \"\\\">\\n  <div class=\\\"vac-comment-header\\\">\\n    <div class=\\\"vac-author-name\\\">\"\n    + alias4(container.lambda(((stack1 = (depth0 != null ? lookupProperty(depth0,\"meta\") : depth0)) != null ? lookupProperty(stack1,\"user_name\") : stack1), depth0))\n    + \"</div>\\n    <div class=\\\"vac-timestamp\\\">\"\n    + alias4(((helper = (helper = lookupProperty(helpers,\"timeSince\") || (depth0 != null ? lookupProperty(depth0,\"timeSince\") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"timeSince\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":4,\"column\":31},\"end\":{\"line\":4,\"column\":44}}}) : helper)))\n    + \"\\n      <span class=\\\"vac-delete-comment\\\">&nbsp;&nbsp;X</span>\\n    </div>\\n  </div>\\n  <div class=\\\"vac-comment-body\\\">\\n    \"\n    + alias4((lookupProperty(helpers,\"breaklines\")||(depth0 && lookupProperty(depth0,\"breaklines\"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,\"body\") : depth0),{\"name\":\"breaklines\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":9,\"column\":4},\"end\":{\"line\":9,\"column\":23}}}))\n    + \"\\n  </div>\\n</div>\\n\";\n},\"useData\":true});\nexports[\"templates\"][\"comment_list\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data,blockParams) {\n    var stack1;\n\n  return \"    \"\n    + ((stack1 = container.lambda(blockParams[0][0], depth0)) != null ? stack1 : \"\")\n    + \"\\n\";\n},\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container,depth0,helpers,partials,data,blockParams) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"<div class=\\\"vac-comments-container\\\">\\n  <div class=\\\"vac-comments-wrap\\\">\\n\"\n    + ((stack1 = lookupProperty(helpers,\"each\").call(alias1,(depth0 != null ? lookupProperty(depth0,\"commentsHTML\") : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(1, data, 1, blockParams),\"inverse\":container.noop,\"data\":data,\"blockParams\":blockParams,\"loc\":{\"start\":{\"line\":3,\"column\":4},\"end\":{\"line\":5,\"column\":13}}})) != null ? stack1 : \"\")\n    + \"    <div class=\\\"vac-reply-btn vac-button\\\">ADD REPLY</div>\\n    <div class=\\\"vac-add-new-shapebox\\\"></div>\\n  </div>\\n  <div class=\\\"vac-comments-control-bar\\\">\\n    <div class=\\\"vac-range\\\"><b>@</b> \"\n    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,\"rangeStr\") || (depth0 != null ? lookupProperty(depth0,\"rangeStr\") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"rangeStr\",\"hash\":{},\"data\":data,\"blockParams\":blockParams,\"loc\":{\"start\":{\"line\":10,\"column\":36},\"end\":{\"line\":10,\"column\":48}}}) : helper)))\n    + \"</div>\\n    <div class=\\\"vac-control-buttons\\\">\\n      <a class=\\\"vac-delete-annotation\\\">DELETE</a> | <a class=\\\"vac-close-comment-list\\\">CLOSE</a>\\n    </div>\\n  </div>\\n</div>\\n\";\n},\"useData\":true,\"useBlockParams\":true});\nexports[\"templates\"][\"comment_list_review\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data,blockParams) {\n    var stack1;\n\n  return \"    \"\n    + ((stack1 = container.lambda(blockParams[0][0], depth0)) != null ? stack1 : \"\")\n    + \"\\n\";\n},\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container,depth0,helpers,partials,data,blockParams) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"<div class=\\\"vac-comments-container\\\">\\n    <div class=\\\"vac-emoji-filter-container\\\">\\n        <div class=\\\"vac-emoji-block\\\" name=\\\"like\\\">\\n            <img class=\\\"vac-emoji-img\\\" src='https://nexxt-inca-storage.s3.us-east-2.amazonaws.com/img/emojis/video-like.png' />\\n        </div>\\n        <div class=\\\"vac-emoji-block\\\" name=\\\"dislike\\\">\\n            <img class=\\\"vac-emoji-img\\\" src='https://nexxt-inca-storage.s3.us-east-2.amazonaws.com/img/emojis/video-dislike.png' />\\n        </div>\\n        <div class=\\\"vac-emoji-block\\\" name=\\\"confused\\\">\\n            <img class=\\\"vac-emoji-img\\\" src='https://nexxt-inca-storage.s3.us-east-2.amazonaws.com/img/emojis/video-confused.png' />\\n        </div>\\n    </div>\\n<div class=\\\"vac-comments-wrap\\\">\\n\"\n    + ((stack1 = lookupProperty(helpers,\"each\").call(alias1,(depth0 != null ? lookupProperty(depth0,\"commentsHTML\") : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(1, data, 1, blockParams),\"inverse\":container.noop,\"data\":data,\"blockParams\":blockParams,\"loc\":{\"start\":{\"line\":14,\"column\":4},\"end\":{\"line\":16,\"column\":13}}})) != null ? stack1 : \"\")\n    + \"    <div class=\\\"vac-reply-btn vac-button\\\">ADD REPLY</div>\\n    <div class=\\\"vac-add-new-shapebox\\\"></div>\\n  </div>\\n  <div class=\\\"vac-comments-control-bar\\\">\\n    <div class=\\\"vac-range\\\"><b>@</b> \"\n    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,\"rangeStr\") || (depth0 != null ? lookupProperty(depth0,\"rangeStr\") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"rangeStr\",\"hash\":{},\"data\":data,\"blockParams\":blockParams,\"loc\":{\"start\":{\"line\":21,\"column\":36},\"end\":{\"line\":21,\"column\":48}}}) : helper)))\n    + \"</div>\\n    <div class=\\\"vac-control-buttons\\\">\\n      <a class=\\\"vac-delete-annotation\\\">DELETE</a> | <a class=\\\"vac-close-comment-list\\\">CLOSE</a>\\n    </div>\\n  </div>\\n</div>\\n\";\n},\"useData\":true,\"useBlockParams\":true});\nexports[\"templates\"][\"controls\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return ((stack1 = lookupProperty(helpers,\"if\").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,\"showControls\") : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":2,\"column\":0},\"end\":{\"line\":12,\"column\":7}}})) != null ? stack1 : \"\");\n},\"2\":function(container,depth0,helpers,partials,data) {\n    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"<div class=\\\"vac-controls vac-control\\\">\\n    <button class=\\\"vac-button\\\">ADD COMMENT</button>\\n\"\n    + ((stack1 = lookupProperty(helpers,\"if\").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,\"showNav\") : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":5,\"column\":4},\"end\":{\"line\":10,\"column\":11}}})) != null ? stack1 : \"\")\n    + \"</div>\\n\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    return \"    <div class=\\\"vac-annotation-nav\\\">\\n        <div class=\\\"vac-a-prev\\\">Prev</div>\\n        <div class=\\\"vac-a-next\\\">Next</div>\\n    </div>\\n\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"\\n\"\n    + ((stack1 = lookupProperty(helpers,\"if\").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,\"writingComment\") : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(6, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":17,\"column\":0},\"end\":{\"line\":52,\"column\":7}}})) != null ? stack1 : \"\");\n},\"6\":function(container,depth0,helpers,partials,data) {\n    return \"<div class=\\\"vac-video-write-new-wrap vac-control\\\">\\n    <div class=\\\"vac-video-write-new vac-is-annotation\\\">\\n        <div>\\n            <span class=\\\"vac-emoji-instructions\\\">Choose an emoji, and explain why you feel that way 👇</span>\\n            <div class=\\\"vac-emoji-container\\\">\\n                <div class=\\\"vac-emoji-block\\\" name=\\\"like\\\">\\n                    <img class=\\\"vac-emoji-img\\\" src='https://nexxt-inca-storage.s3.us-east-2.amazonaws.com/img/emojis/video-like.png' />\\n                    <div class=\\\"vac-emoji-label\\\">Like</div>\\n                </div>\\n                <div class=\\\"vac-emoji-block\\\" name=\\\"dislike\\\">\\n                    <img class=\\\"vac-emoji-img\\\" src='https://nexxt-inca-storage.s3.us-east-2.amazonaws.com/img/emojis/video-dislike.png' />\\n                    <div class=\\\"vac-emoji-label\\\">Dislike</div>\\n                </div>\\n                   <div class=\\\"vac-emoji-block\\\" name=\\\"confused\\\">\\n                    <img class=\\\"vac-emoji-img\\\" src='https://nexxt-inca-storage.s3.us-east-2.amazonaws.com/img/emojis/video-confused.png' />\\n                    <div class=\\\"vac-emoji-label\\\">Confused</div>\\n                </div>\\n\\n            </div>\\n            <div class=\\\"vac-comment-error\\\"></div>\\n            <div class=\\\"vac-comment-showbox\\\">\\n                <textarea placeholder=\\\"Enter comment...\\\"></textarea>\\n                <div>\\n                    <button class=\\\"vac-button\\\">SAVE</button>\\n                    <a>Cancel</a>\\n                </div>\\n            </div>\\n            <div class=\\\"vac-video-move\\\">\\n                <div class=\\\"vac-a-prev\\\">-1 sec</div>\\n                <div class=\\\"vac-a-next\\\">+1 sec</div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";\n},\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return ((stack1 = lookupProperty(helpers,\"unless\").call(alias1,(depth0 != null ? lookupProperty(depth0,\"adding\") : depth0),{\"name\":\"unless\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":13,\"column\":11}}})) != null ? stack1 : \"\")\n    + \"\\n\"\n    + ((stack1 = lookupProperty(helpers,\"if\").call(alias1,(depth0 != null ? lookupProperty(depth0,\"adding\") : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":15,\"column\":0},\"end\":{\"line\":53,\"column\":7}}})) != null ? stack1 : \"\");\n},\"useData\":true});\nexports[\"templates\"][\"draggable_marker\"] = Handlebars.template({\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=\"function\", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"<div data-marker-id=\\\"\"\n    + alias4(((helper = (helper = lookupProperty(helpers,\"id\") || (depth0 != null ? lookupProperty(depth0,\"id\") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":27}}}) : helper)))\n    + \"\\\" class=\\\"vac-marker-draggable vac-ranged-marker\\\" style=\\\"left: \"\n    + alias4(((helper = (helper = lookupProperty(helpers,\"left\") || (depth0 != null ? lookupProperty(depth0,\"left\") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"left\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":1,\"column\":89},\"end\":{\"line\":1,\"column\":97}}}) : helper)))\n    + \"; width:\"\n    + alias4(((helper = (helper = lookupProperty(helpers,\"width\") || (depth0 != null ? lookupProperty(depth0,\"width\") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"width\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":1,\"column\":105},\"end\":{\"line\":1,\"column\":114}}}) : helper)))\n    + \";\\\">\\n</div>\\n\";\n},\"useData\":true});\nexports[\"templates\"][\"marker\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"vac-ranged-marker\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"width:\"\n    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,\"width\") || (depth0 != null ? lookupProperty(depth0,\"width\") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{\"name\":\"width\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":2,\"column\":50},\"end\":{\"line\":2,\"column\":59}}}) : helper)))\n    + \";\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return ((stack1 = lookupProperty(helpers,\"if\").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,\"tooltipBody\") : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(6, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":4,\"column\":4},\"end\":{\"line\":10,\"column\":11}}})) != null ? stack1 : \"\");\n},\"6\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=\"function\", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"    <div>\\n        <span class=\\\"vac-tooltip \"\n    + ((stack1 = lookupProperty(helpers,\"if\").call(alias1,(depth0 != null ? lookupProperty(depth0,\"tooltipRight\") : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":6,\"column\":33},\"end\":{\"line\":6,\"column\":74}}})) != null ? stack1 : \"\")\n    + \"\\\">\\n            <b>\"\n    + alias4(((helper = (helper = lookupProperty(helpers,\"tooltipTime\") || (depth0 != null ? lookupProperty(depth0,\"tooltipTime\") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"tooltipTime\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":7,\"column\":15},\"end\":{\"line\":7,\"column\":30}}}) : helper)))\n    + \"</b> - \"\n    + alias4(((helper = (helper = lookupProperty(helpers,\"tooltipBody\") || (depth0 != null ? lookupProperty(depth0,\"tooltipBody\") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"tooltipBody\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":7,\"column\":37},\"end\":{\"line\":7,\"column\":52}}}) : helper)))\n    + \"\\n        </span>\\n    </div>\\n\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    return \"vac-right-side\";\n},\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=\"function\", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"<div data-marker-id=\\\"\"\n    + alias4(((helper = (helper = lookupProperty(helpers,\"id\") || (depth0 != null ? lookupProperty(depth0,\"id\") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"id\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":27}}}) : helper)))\n    + \"\\\" class=\\\"vac-marker \"\n    + ((stack1 = lookupProperty(helpers,\"if\").call(alias1,(depth0 != null ? lookupProperty(depth0,\"rangeShow\") : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":1,\"column\":47},\"end\":{\"line\":1,\"column\":88}}})) != null ? stack1 : \"\")\n    + \"\\\"\\n    style=\\\"left: \"\n    + alias4(((helper = (helper = lookupProperty(helpers,\"left\") || (depth0 != null ? lookupProperty(depth0,\"left\") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"left\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":2,\"column\":17},\"end\":{\"line\":2,\"column\":25}}}) : helper)))\n    + \"; \"\n    + ((stack1 = lookupProperty(helpers,\"if\").call(alias1,(depth0 != null ? lookupProperty(depth0,\"rangeShow\") : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":2,\"column\":27},\"end\":{\"line\":2,\"column\":67}}})) != null ? stack1 : \"\")\n    + \" z-index: \"\n    + alias4(((helper = (helper = lookupProperty(helpers,\"zIndex\") || (depth0 != null ? lookupProperty(depth0,\"zIndex\") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"zIndex\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":2,\"column\":77},\"end\":{\"line\":2,\"column\":87}}}) : helper)))\n    + \"\\\">\\n\"\n    + ((stack1 = lookupProperty(helpers,\"if\").call(alias1,(depth0 != null ? lookupProperty(depth0,\"showTooltip\") : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":3,\"column\":4},\"end\":{\"line\":11,\"column\":11}}})) != null ? stack1 : \"\")\n    + \"</div>\\n\";\n},\"useData\":true});\nexports[\"templates\"][\"marker_wrap\"] = Handlebars.template({\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    return \"<div class=\\\"vac-marker-owrap\\\">\\n\t<div class=\\\"vac-marker-wrap\\\"></div>\\n</div>\\n\";\n},\"useData\":true});\nexports[\"templates\"][\"new_comment\"] = Handlebars.template({\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=\"function\", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"<div class=\\\"vac-video-write-new-wrap vac-new-comment\\\">\\n  <div class=\\\"vac-video-write-new vac-is-comment\\\">\\n    <div class=\\\"vac-comment-showbox\\\" style=\\\"width:\"\n    + alias4(((helper = (helper = lookupProperty(helpers,\"width\") || (depth0 != null ? lookupProperty(depth0,\"width\") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"width\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":3,\"column\":50},\"end\":{\"line\":3,\"column\":59}}}) : helper)))\n    + \"px;top:\"\n    + alias4(((helper = (helper = lookupProperty(helpers,\"top\") || (depth0 != null ? lookupProperty(depth0,\"top\") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"top\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":3,\"column\":66},\"end\":{\"line\":3,\"column\":73}}}) : helper)))\n    + \"px;right:\"\n    + alias4(((helper = (helper = lookupProperty(helpers,\"right\") || (depth0 != null ? lookupProperty(depth0,\"right\") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"right\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":3,\"column\":82},\"end\":{\"line\":3,\"column\":91}}}) : helper)))\n    + \"px\\\">\\n      <textarea placeholder=\\\"Enter comment...\\\"></textarea>\\n      <div>\\n        <button class=\\\"vac-button\\\">SAVE</button>\\n        <a>Cancel</a>\\n      </div>\\n    </div>\\n  </div>\\n\";\n},\"useData\":true});\nexports[\"templates\"][\"player_button\"] = Handlebars.template({\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    return \"\";\n},\"useData\":true});",
    "/*\n    Component for an annotation, which includes controlling the marker/shape, rendering a commentList, etc\n*/\n\nconst PlayerUIComponent = require('./../lib/player_ui_component');\nconst Utils = require('./../lib/utils.js');\nconst CommentList = require('./comment_list');\nconst Marker = require('./marker');\nconst Comment = require('./comment');\nconst Shape = require('./shape');\n\nmodule.exports = class Annotation extends PlayerUIComponent {\n  constructor(data, player) {\n    super(player);\n    this.id = data.id || this.componentId;\n    this.emoji = data.emoji;\n    this.range = data.range;\n    this.shape = data.shape;\n    this.secondsActive = this.buildSecondsActiveArray();\n    this.buildComments(data);\n    this.buildMarker();\n    this.buildShape();\n    this.bindEvents();\n\n    this.isOpen = false;\n  }\n\n  buildComments(data) {\n    this.commentList = new CommentList({ comments: data.comments, annotation: this }, this.player);\n  }\n\n  buildMarker() {\n    this.marker = new Marker(this.player, this.range, this.commentList.comments[0]);\n    this.marker.render();\n  }\n\n  buildShape() {\n    this.annotationShape = new Shape(this.player, this.shape);\n  }\n\n  // Serialize object\n  get data() {\n    return {\n      id: this.id,\n      range: this.range,\n      shape: this.shape,\n      comments: this.commentList.data\n    };\n  }\n\n  bindEvents() {\n    this.marker.$el.on('click.vac-marker', (e) =>\n      this.plugin.annotationState.openAnnotation(this, true)\n    );\n  }\n\n  // Opens the annotation. Handles marker, commentList, shape, Annotation state, and player state\n  open(withPause = true, previewOnly = false, forceSnapToStart = false) {\n    this.isOpen = true;\n    const snapToStart =\n      forceSnapToStart ||\n      !Utils.isWithinRange(this.range.start, this.range.end, Math.floor(this.currentTime));\n\n    const showTooltip = previewOnly && this.plugin.options.showMarkerShapeAndTooltips;\n    this.marker.setActive(showTooltip);\n    if (!previewOnly && this.plugin.options.showCommentList) {\n      this.commentList.render();\n    }\n\n    if (!previewOnly || (previewOnly && this.plugin.options.showMarkerShapeAndTooltips)) {\n      this.annotationShape.render();\n\n      if (this.shape) {\n        this.annotationShape.$el.on('click.vac-annotation', () => {\n          this.plugin.annotationState.openAnnotation(this, false, false, false);\n        });\n      }\n    }\n\n    if (withPause) this.player.pause();\n    if (snapToStart) this.currentTime = this.range.start;\n\n    this.plugin.fire('annotationOpened', {\n      annotation: this.data,\n      triggered_by_timeline: previewOnly\n    });\n  }\n\n  // Closes the annotation. Handles marker, commendList, shape, and AnnotationState\n  close(clearActive = true) {\n    if (!this.isOpen) return;\n    this.isOpen = false;\n    this.marker.deactivate();\n    this.commentList.teardown(false);\n    if (this.annotationShape.$el) this.annotationShape.$el.off('click.vac-annotation');\n    this.annotationShape.teardown();\n    if (clearActive) this.plugin.annotationState.clearActive();\n    this.plugin.fire('annotationClosed', this.data);\n  }\n\n  // For preloading an array of seconds active on initialization\n  // Values used to build timeMap in AnnotationState\n  buildSecondsActiveArray() {\n    const seconds = [];\n    if (this.range.end) {\n      for (let i = this.range.start; i <= this.range.end; i++) {\n        seconds.push(i);\n      }\n    } else {\n      const { start } = this.range;\n      seconds.push(start);\n      if (start < this.duration) seconds.push(start + 1);\n    }\n    return seconds;\n  }\n\n  // Tearsdown annotation and marker, removes object from AnnotationState\n  teardown(removeFromCollection = true) {\n    this.close(true);\n    this.marker.teardown();\n    if (this.commentList) this.commentList.teardown(removeFromCollection);\n    if (removeFromCollection) this.plugin.annotationState.removeAnnotation(this);\n    if (this.annotationShape) this.annotationShape.teardown();\n    if (removeFromCollection) super.teardown();\n  }\n\n  // Build a new annotation instance by passing in data for range, shape, comment, & plugin ref\n  static newFromData(range, emoji, commentStr, plugin, id = null) {\n    const comment = Comment.dataObj(commentStr, plugin);\n    if (range) range = Utils.parseIntObj(range);\n    const data = {\n      id,\n      range,\n      emoji,\n      comments: [comment]\n    };\n    return new Annotation(data, plugin.player);\n  }\n\n  get isActive() {\n    return this.plugin.annotationState.activeAnnotation === this;\n  }\n};\n",
    "/*\n    Component for managing the state of annotations, including showing active annotation during playback,\n    toggling active states for annotations, navigating annotations forward/back, etc\n*/\n\nconst Utils = require('./../lib/utils');\nconst PlayerComponent = require('./../lib/player_component');\nconst Annotation = require('./annotation');\n\nmodule.exports = class AnnotationState extends PlayerComponent {\n  constructor(player) {\n    super(player);\n    this.initAPI(this, 'AnnotationState');\n    this.resetData();\n    this.bindEvents();\n    this._enabledReviewMode = this.enableReviewMode.bind(this);\n    this.reviewMode = false;\n  }\n\n  // sets _enabled and closes or opens annotation as needed\n  set enabled(shouldBeEnabled) {\n    this._enabled = shouldBeEnabled;\n    if (!shouldBeEnabled) this.activeAnnotation.close();\n    if (shouldBeEnabled) {\n      this.skipLiveCheck = false;\n      this.setLiveAnnotation();\n    }\n  }\n\n  get enabled() {\n    return this._enabled;\n  }\n\n  // Sets _annotations w/Annoation objects from input array\n  set annotations(annotationsData) {\n    this._annotations = annotationsData.map((a) => new Annotation(a, this.player));\n    this.sortAnnotations();\n    this.rebuildAnnotationTimeMap();\n  }\n\n  get annotations() {\n    return this._annotations;\n  }\n\n  set activeAnnotation(annotation = null) {\n    this._activeAnnotation = annotation;\n  }\n\n  // Get current active annotation or a null object with .close()\n  get activeAnnotation() {\n    return this._activeAnnotation || { close: () => {} };\n  }\n\n  // Serialize data\n  get data() {\n    return this._annotations.map((a) => a.data);\n  }\n\n  // Bind events for setting liveAnnotation on video time change\n  bindEvents() {\n    this.player.on('timeupdate', Utils.throttle(this.setLiveAnnotation.bind(this), 100));\n  }\n\n  // Sort annotations by range.start\n  sortAnnotations() {\n    this._annotations.sort((a, b) => {\n      return a.range.start < b.range.start ? -1 : a.range.start > b.range.start ? 1 : 0;\n    });\n  }\n\n  // Add a new annotation\n  addNewAnnotation(annotation) {\n    this._annotations.push(annotation);\n    this.openAnnotation(annotation, true, true, false, true);\n    this.stateChanged();\n  }\n\n  // Create and add a annotation\n  createAndAddAnnotation(data) {\n    this.plugin.controls.uiState.adding && this.plugin.controls.cancelAddNew();\n\n    const annotation = Annotation.newFromData(\n      data.range,\n      data.shape,\n      data.commentStr || '',\n      this.plugin,\n      data.id\n    );\n    this.addNewAnnotation(annotation);\n  }\n\n  // Destroy an existing annotation\n  destroyAnnotationById(id) {\n    const annotation = this.findAnnotation(id);\n    if (annotation) annotation.teardown();\n  }\n\n  // Remove an annotation\n  removeAnnotation(annotation) {\n    const { id } = annotation;\n    const i = this._annotations.indexOf(annotation);\n    this._annotations.splice(i, 1);\n    this.stateChanged();\n    this.plugin.fire('annotationDeleted', { id });\n  }\n\n  // Set the live annotation based on current video time\n  setLiveAnnotation() {\n    if (!this.enabled) return;\n    const time = Math.floor(this.currentTime);\n\n    if (this.skipLiveCheck) {\n      if (time !== this.lastVideoTime) this.skipLiveCheck = false;\n      return;\n    }\n\n    const matches = this.activeAnnotationsForTime(time);\n    if (!matches.length) return this.activeAnnotation.close();\n\n    // Set live annotation as the last match\n    const liveAnnotation = this.annotations[matches[matches.length - 1]];\n\n    // Special cases if this or another annotation is active\n    if (this.activeAnnotation.range) {\n      if (liveAnnotation === this.activeAnnotation) return;\n      // Check if the active annotation and live annotation share a start time\n      // Is that start time at the current playhead?\n      // If so, don't switch which is active.\n      const liveStart = liveAnnotation.range.start;\n      const activeStart = this.activeAnnotation.range.start;\n      if (liveStart === activeStart && liveStart === time) return;\n    }\n\n    this.openAnnotation(liveAnnotation, false, false, true);\n  }\n\n  // Get all active annotations for a time (in seconds)\n  activeAnnotationsForTime(time) {\n    if (!this.annotations.length) return [];\n    return this.annotationTimeMap[time] || [];\n  }\n\n  /*\n        Rebuild the annotation time map\n        Example: this._annotations[1] and this._annotations[3] are active during second 4\n            this.annotationTimeMap = { 4: [1, 3] }\n    */\n  rebuildAnnotationTimeMap() {\n    const timeMap = {};\n    this.annotations.forEach((annotation) => {\n      annotation.secondsActive.forEach((second) => {\n        const val = timeMap[second] || [];\n        val.push(this.annotations.indexOf(annotation));\n        timeMap[second] = val;\n      });\n    });\n    this.annotationTimeMap = timeMap;\n  }\n\n  // Close active annotation and remove reference in state\n  clearActive() {\n    this.activeAnnotation.close(false);\n    this._activeAnnotation = null;\n  }\n\n  // Open annotation with options to pause and show preview\n  // skipLiveCheck will short circuit setLiveAnnotation()\n  openAnnotation(\n    annotation,\n    skipLiveCheck = false,\n    pause = true,\n    previewOnly = false,\n    forceSnapToStart = false\n  ) {\n    if (!this.plugin.active) this.plugin.toggleAnnotationMode();\n    this.skipLiveCheck = skipLiveCheck;\n    this.clearActive();\n    annotation.open(pause, previewOnly, forceSnapToStart);\n    this.activeAnnotation = annotation;\n    this.lastVideoTime = this.activeAnnotation.range.start;\n  }\n\n  // Open an annotation by ID (if it exists)\n  openAnnotationById(id) {\n    const annotation = this.findAnnotation(id);\n    if (annotation) this.openAnnotation(annotation);\n  }\n\n  // Returns annotation object given ID\n  findAnnotation(id) {\n    return this.annotations.find((a) => a.id == id);\n  }\n\n  // Returns comment object given ID\n  findComment(id) {\n    let comments = this.annotations.map((a) => a.commentList.comments);\n    comments = [].concat(...comments); // flatten 2d array\n    return comments.find((c) => c.id == id);\n  }\n\n  // Finds the next annotation in collection and opens it\n  nextAnnotation() {\n    if (this._activeAnnotation) {\n      const ind = this.annotations.indexOf(this._activeAnnotation);\n      const nextInd = ind === this.annotations.length - 1 ? 0 : ind + 1;\n      return this.openAnnotation(this.annotations[nextInd], true);\n    }\n    const time = Math.floor(this.currentTime);\n    for (let i = 0; i < this.annotations.length; i++) {\n      if (this.annotations[i].range.start > time)\n        return this.openAnnotation(this.annotations[i], true);\n    }\n    this.openAnnotation(this.annotations[0], true);\n  }\n\n  // Finds the previous annotation in collection and opens it\n  prevAnnotation() {\n    if (this._activeAnnotation) {\n      const ind = this.annotations.indexOf(this._activeAnnotation);\n      const nextInd = ind === 0 ? this.annotations.length - 1 : ind - 1;\n      return this.openAnnotation(this.annotations[nextInd], true);\n    }\n    const time = Math.floor(this.currentTime);\n    for (let i = this.annotations.length - 1; i >= 0; i--) {\n      if (this.annotations[i].range.start < time)\n        return this.openAnnotation(this.annotations[i], true);\n    }\n    this.openAnnotation(this.annotations[this.annotations.length - 1], true);\n  }\n\n  enableReviewMode() {\n    this.reviewMode = true;\n  }\n\n  // Use anywhere the annotation data changes\n  // Cleans internal state data, updates player button, triggers configurable callback\n  stateChanged() {\n    this.sortAnnotations();\n    this.rebuildAnnotationTimeMap();\n    this.plugin.fire('onStateChanged', this.data);\n  }\n\n  // Reset internal state properties\n  resetData() {\n    this.annotations = [];\n    this.annotationTimeMap = {};\n    this.activeAnnotation = null;\n    this.enabled = false;\n    this.skipNextTimeCheck = false;\n    this.lastVideoTime = 0;\n    this.reviewMode = false;\n  }\n\n  // Remove UI and unbind events for this and child components\n  teardown() {\n    this.annotations.forEach((annotation) => {\n      annotation.teardown(false);\n    });\n    this.resetData();\n    super.teardown();\n  }\n};\n",
    "/*\n  Component for an invidual comment\n*/\n\nconst moment = require('moment');\nconst PlayerUIComponent = require('./../lib/player_ui_component');\nconst Utils = require('./../lib/utils');\n\nconst templateName = 'comment';\n\nmodule.exports = class Comment extends PlayerUIComponent {\n  constructor(data, player) {\n    super(player);\n    this.commentList = data.commentList;\n    this.id = data.id || this.componentId;\n    this.meta = data.meta;\n    this.body = data.body;\n    this.timestamp = moment(data.meta.datetime).unix();\n    this.timeSince = this.timeSince();\n\n    this.$el = $(this.render());\n  }\n\n  // Serialize data\n  get data() {\n    return {\n      id: this.id,\n      meta: this.meta,\n      body: this.body\n    };\n  }\n\n  get HTML() {\n    return this.$el[0].outerHTML;\n  }\n\n  render() {\n    return this.renderTemplate(templateName, {\n      id: this.id,\n      body: this.body,\n      meta: this.meta,\n      timeSince: this.timeSince\n    });\n  }\n\n  // Return time since comment timestamp\n  timeSince() {\n    return moment(this.meta.datetime).fromNow();\n  }\n\n  teardown(destroy = false) {\n    super.teardown(destroy);\n  }\n\n  // Return a Comment obj given body content and plugin reference\n  static newFromData(body, commentList, plugin) {\n    const data = this.dataObj(body, plugin);\n    data.commentList = commentList;\n    return new Comment(data, plugin.player);\n  }\n\n  // Return an object with plugin data, timestamp, unique id, and body content\n  static dataObj(body, plugin) {\n    return {\n      meta: { datetime: moment().toISOString(), ...plugin.meta },\n      id: Utils.guid(),\n      body\n    };\n  }\n};\n",
    "/*\n  Component for a list of comments in a visible/active annotation\n*/\n\nconst PlayerUIComponent = require('./../lib/player_ui_component');\nconst Utils = require('./../lib/utils');\nconst Comment = require('./comment');\n\nconst commentListTemplateName = 'comment_list';\nconst commentListReviewTemplateName = 'comment_list_review';\nconst newCommentTemplateName = 'new_comment';\n\nmodule.exports = class CommentList extends PlayerUIComponent {\n  constructor(data, player) {\n    super(player);\n\n    this.annotation = data.annotation;\n    this.comments = data.comments.map((commentData) => {\n      commentData.commentList = this;\n      return new Comment(commentData, player);\n    });\n    this.sortComments();\n  }\n\n  // Serialize object\n  get data() {\n    return this.comments.map((c) => c.data);\n  }\n\n  // Bind all events needed for the comment list\n  bindListEvents() {\n    this.$el\n      .on('click.vac-comment', '.vac-close-comment-list', () => this.annotation.close()) // Hide CommentList UI with close button\n      .on('click.vac-comment', '.vac-reply-btn', this.addNewComment.bind(this)) // Open new reply UI with reply button\n      .on(\n        'click.vac-comment',\n        '.vac-delete-annotation',\n        this.handleDeleteAnnotationClick.bind(this)\n      ) // Delete annotation with main delete button\n      .on('click.vac-comment', '.vac-delete-comment', this.destroyComment.bind(this)) // Delete comment with delete comment button\n      .on(\n        'mousewheel.vac-comment DOMMouseScroll.vac-comment',\n        '.vac-comments-wrap',\n        this.disablePageScroll.bind(this)\n      ); // Prevent outer page scroll when scrolling inside of the CommentList UI\n  }\n\n  // Bind event listeners for new comments form\n  bindCommentFormEvents() {\n    this.$newCommentForm\n      .on(\n        'click.vac-comment',\n        '.vac-add-controls a, .vac-video-write-new.vac-is-comment a',\n        this.closeNewComment.bind(this)\n      ) // Cancel new comment creation with cancel link\n      .on(\n        'click.vac-comment',\n        '.vac-video-write-new.vac-is-comment button',\n        this.saveNewComment.bind(this)\n      ); // Save new comment with save button\n  }\n\n  // Render CommentList UI with all comments using template\n  render() {\n    var templateData = {\n      commentsHTML: this.comments.map((c) => c.HTML),\n      rangeStr: Utils.humanTime(this.annotation.range),\n      emoji: this.annotation.emoji\n    };\n\n    if (this.plugin.annotationState.reviewMode) {\n      this.$el = $(this.renderTemplate(commentListReviewTemplateName), templateData);\n    } else {\n      this.$el = $(this.renderTemplate(commentListTemplateName, templateData));\n    }\n\n    this.$player.append(this.$el);\n    this.$wrap = this.$UI.commentsContainer;\n    this.bindListEvents();\n  }\n\n  // Re-render UI on state change\n  reRender() {\n    this.teardown(false);\n    this.render();\n  }\n\n  // Render new comment form\n  addNewComment() {\n    this.$wrap.addClass(this.UI_CLASSES.active).find('.vac-comments-wrap').scrollTop(999999);\n    const $shapebox = this.$wrap.find('.vac-add-new-shapebox');\n    const width = $shapebox.outerWidth();\n    const top = $shapebox.position().top + 10;\n    const right = this.$wrap.outerWidth() - ($shapebox.position().left + width);\n\n    this.$newCommentForm = $(this.renderTemplate(newCommentTemplateName, { width, top, right }));\n    this.bindCommentFormEvents();\n    this.$player.append(this.$newCommentForm);\n  }\n\n  // Save comment from new comment form, update state and re-render UI\n  saveNewComment() {\n    this.$wrap.removeClass(this.UI_CLASSES.active);\n\n    const user_id = 1;\n    const body = this.$UI.newCommentTextarea.val();\n\n    if (!body) return; // empty comment - TODO add validation / err message\n    this.createComment(body);\n  }\n\n  createComment(body) {\n    const comment = Comment.newFromData(body, this, this.plugin);\n    this.comments.push(comment);\n    this.sortComments();\n\n    // Don't mutate UI if comment is being created for an inactive annotation (via API)\n    if (this.annotation.isActive) {\n      this.reRender(false);\n      this.closeNewComment();\n    }\n\n    this.plugin.annotationState.stateChanged();\n  }\n\n  // Cancel comment adding process\n  closeNewComment() {\n    this.unbindCommentFormEvents();\n    if (this.$wrap) this.$wrap.removeClass(this.UI_CLASSES.active);\n    if (this.$newCommentForm) this.$newCommentForm.remove();\n  }\n\n  // Delete a comment. If it is the only comment, delete the annotation\n  // Update state and re-render UI\n  destroyComment(event) {\n    const annotationId = this.annotation.id;\n    if (this.comments.length == 1) {\n      this.annotation.teardown();\n    } else {\n      const commentId = this.findCommentId(event);\n      const comment = this.comments.find((c) => c.id == commentId);\n      const i = this.comments.indexOf(comment);\n      this.comments.splice(i, 1);\n      this.reRender();\n    }\n\n    this.plugin.annotationState.stateChanged();\n  }\n\n  findCommentId(event) {\n    const id =\n      typeof event.detail.id === 'undefined'\n        ? $(event.target).closest('.vac-comment').data('id')\n        : event.detail.id;\n    return id;\n  }\n\n  // Prevents outer page scroll when at the top or bottom of CommentList UI\n  // TODO: This might need to be fine-tuned?\n  disablePageScroll(event) {\n    const $target = $(event.currentTarget);\n    const height = $target.height();\n    const ogEvent = event.originalEvent;\n    const delta = ogEvent.wheelDelta || -ogEvent.detail;\n    const dir = delta < 0 ? 'down' : 'up';\n    const scrollDiff = Math.abs(\n      event.currentTarget.scrollHeight - event.currentTarget.clientHeight\n    );\n\n    // if scrolling into top of div\n    if ($target.scrollTop() < 20 && dir == 'up') {\n      $target.stop();\n      $target.animate({ scrollTop: 0 }, 100);\n      event.preventDefault();\n    }\n\n    // if scrolling into bottom of div\n    if ($target.scrollTop() > scrollDiff - 10 && dir == 'down') {\n      $target.stop();\n      $target.animate({ scrollTop: height + 40 }, 100);\n      event.preventDefault();\n    }\n  }\n\n  // Sort comments by timestamp\n  sortComments() {\n    this.comments.sort((a, b) => {\n      return a.timestamp < b.timestamp ? -1 : a.timestamp > b.timestamp ? 1 : 0;\n    });\n  }\n\n  // Delete the annotation\n  handleDeleteAnnotationClick(e) {\n    const $confirmEl = $('<a/>').addClass('vac-delete-confirm').text('CONFIRM');\n    $confirmEl.on('click.comment', () => {\n      $confirmEl.off('click.comment');\n      this.annotation.teardown();\n    });\n    $(e.target).replaceWith($confirmEl);\n  }\n\n  // Unbind listeners for new comments form\n  unbindCommentFormEvents() {\n    if (this.$newCommentForm) this.$newCommentForm.off('click.vac-comment');\n  }\n\n  // Teardown CommentList UI, unbind events\n  teardown(destroyComments = true) {\n    if (this.$el) {\n      this.$el.off('click.vac-comment mousewheel.vac-comment DOMMouseScroll.vac-comment');\n    }\n    this.comments.forEach((c) => c.teardown(destroyComments));\n    if (destroyComments) this.comments = [];\n    super.teardown();\n  }\n};\n",
    "/*\n    Component for managing annotation \"control box\" in upper left of video when in annotation mode,\n    including all functionality to add new annotations\n*/\n\nconst PlayerUIComponent = require('./../lib/player_ui_component');\nconst Utils = require('./../lib/utils');\nconst DraggableMarker = require('./draggable_marker.js');\nconst SelectableShape = require('./selectable_shape.js');\nconst PlayerButton = require('./player_button');\nconst Annotation = require('./annotation');\nconst { times } = require('underscore');\n\nconst templateName = 'controls';\n\n// Control uses a \"ui state\" to determine how UI is rendered - this object is the base state, containing a\n// default value for each item in the state\nconst BASE_UI_STATE = Object.freeze({\n  adding: false, // Are we currently adding a new annotation? (step 1 of flow)\n  writingComment: false // Are we currently writing the comment for annotation (step 2 of flow)\n});\n\nmodule.exports = class Controls extends PlayerUIComponent {\n  constructor(player, bindArrowKeys) {\n    super(player);\n    this.initAPI(this, 'Controls');\n    this.internalCommenting = this.plugin.options.internalCommenting;\n    this.showControls = this.plugin.options.showControls;\n    this.uiState = Utils.cloneObject(BASE_UI_STATE);\n    this.bindEvents(bindArrowKeys);\n\n    if (this.showControls) {\n      // create player button in the control bar if controls are shown\n      this.playerButton = new PlayerButton(this.player);\n    }\n\n    this.render();\n  }\n\n  // Bind all the events we need for UI interaction\n  bindEvents(bindArrowKeys) {\n    this.$player\n      .on('click.vac-controls', '.vac-controls button', this.startAddNew.bind(this)) // Add new button click\n      .on('click.vac-controls', '.vac-annotation-nav .vac-a-next', () =>\n        this.plugin.annotationState.nextAnnotation()\n      ) // Click 'next' on annotation nav\n      .on('click.vac-controls', '.vac-annotation-nav .vac-a-prev', () =>\n        this.plugin.annotationState.prevAnnotation()\n      ) // Click 'prev' on annotation nav\n      .on('click.vac-control', '.vac-video-move .vac-a-next', () => this.marker.scrubStart(1)) // Click '+1 sec' on marker nav\n      .on('click.vac-control', '.vac-video-move .vac-a-prev', () => this.marker.scrubStart(-1)); // Click '-1 sec' on marker nav\n\n    if (this.internalCommenting) {\n      this.$player\n        .on('click.vac-controls', '.vac-add-controls button', this.writeComment.bind(this)) // 'Next' button click while adding\n        .on('click.vac-control', '.vac-emoji-container .vac-emoji-block', (e) =>\n          this.selectEmoji(e)\n        )\n        .on(\n          'click.vac-controls',\n          '.vac-video-write-new.vac-is-annotation button',\n          this.saveNew.bind(this)\n        ) // 'Save' button click while adding\n        .on(\n          'click.vac-controls',\n          '.vac-add-controls a, .vac-video-write-new.vac-is-annotation a',\n          this.cancelAddNew.bind(this)\n        ); // Cancel link click\n    }\n    if (bindArrowKeys) {\n      $(document).on(`keyup.vac-nav-${this.playerId}`, (e) => this.handleArrowKeys(e)); // Use arrow keys to navigate annotations\n    }\n  }\n\n  // Remove UI and unbind events for this and child components\n  teardown() {\n    this.clear(true);\n    this.$player.off('click.vac-controls');\n    $(document).off(`keyup.vac-nav-${this.playerId} mousemove.vac-tooltip-${this.playerId}`);\n    if (this.playerButton) this.playerButton.teardown();\n    super.teardown();\n  }\n\n  // Clear existing UI (resetting components if need be)\n  clear(reset = false) {\n    if (reset) {\n      if (this.uiState.adding) {\n        this.restoreNormalUI();\n        this.marker.teardown();\n        this.selectableShape.teardown();\n      }\n      this.uiState = Utils.cloneObject(BASE_UI_STATE);\n      this.$player\n        .find('.vac-video-cover-canvas')\n        .off('mousedown.vac-cursor-tooltip')\n        .off('mouseup.vac-cursor-tooltip');\n    }\n    this.$tooltip_ = null;\n    this.$UI.controlElements.remove();\n  }\n\n  // Render the UI elements (based on uiState)\n  render(reset = false) {\n    this.clear(reset);\n    const data = {\n      rangeStr: this.marker ? Utils.humanTime(this.marker.range) : null,\n      showNav: this.plugin.annotationState.annotations.length > 1,\n      ...this.uiState,\n      internalCommenting: this.internalCommenting,\n      showControls: this.showControls\n    };\n\n    const $ctrls = this.renderTemplate(templateName, data);\n    this.$player.append($ctrls);\n\n    if (this.playerButton) this.playerButton.updateNumAnnotations();\n  }\n\n  // User clicked to cancel in-progress add - restore to normal state\n  cancelAddNew() {\n    if (!(this.uiState.adding || this.uiState.writingComment)) return;\n    this.render(true);\n    this.marker.teardown();\n    this.marker = null;\n    this.emoji = null;\n  }\n\n  // User clicked 'add' button in the controls - setup UI and marker\n  startAddNew() {\n    // pause and make sure plugin is ready\n    if (!this.plugin.active) this.plugin.toggleAnnotationMode();\n    this.player.pause();\n\n    // switch to adding UI\n    this.setAddingUI();\n    this.uiState.adding = true;\n    this.render();\n\n    // construct new range and create marker\n    const range = {\n      start: parseInt(this.currentTime, 10),\n      stop: parseInt(this.currentTime, 10)\n    };\n    this.marker = new DraggableMarker(this.player, range);\n    this.selectableShape = new SelectableShape(this.player);\n\n    // show cursor help text if controls are hidden\n    if (!this.showControls) this.bindCursorTooltip();\n\n    // fire signal\n    this.plugin.fire('enteredAddingAnnotation', { range });\n\n    // immediately show comment writing prompt (skip the need to click)\n    this.writeComment();\n  }\n\n  // User clicked 'next' action - show UI to write comment\n  writeComment() {\n    this.uiState.writingComment = true;\n    this.render();\n  }\n\n  selectEmoji(e) {\n    const element = e.target;\n    const $emoji_block = $(element).parent();\n    const emoji = $emoji_block.attr('name');\n\n    if (this.emoji && this.emoji == emoji) {\n      this.emoji = null;\n      $('.vac-emoji-block').removeClass('vac-emoji-selected').removeClass('vac-emoji-unselected');\n    } else {\n      // apply styles\n      $('.vac-emoji-block').removeClass('vac-emoji-selected').addClass('vac-emoji-unselected');\n      $emoji_block.addClass('vac-emoji-selected').removeClass('vac-emoji-unselected');\n      this.emoji = emoji;\n    }\n  }\n\n  // User clicked to save a new annotation/comment during add new flow\n  saveNew() {\n    const comment = this.$UI.newCommentTextarea.val();\n    const commentBox = document.getElementsByClassName('vac-comment-error')[0];\n    commentBox.innerHTML = '';\n    if (!comment) {\n      commentBox.innerHTML += 'Please add text in the comment box';\n      return; // empty comment - TODO add validation / err message\n    }\n\n    if (!this.emoji) {\n      commentBox.innerHTML += 'Please select emoji';\n      return;\n    }\n\n    const a = Annotation.newFromData(this.marker.range, this.emoji, comment, this.plugin);\n    this.plugin.annotationState.addNewAnnotation(a);\n\n    this.cancelAddNew();\n  }\n\n  // Change normal UI (hide markers, hide playback, etc) on init add state\n  setAddingUI() {\n    this.plugin.annotationState.enabled = false;\n    this.disablePlayingAndControl();\n  }\n\n  // Restore normal UI after add state\n  restoreNormalUI() {\n    this.plugin.annotationState.enabled = this.plugin.active;\n    this.enablePlayingAndControl();\n    $(document).off(`mousemove.vac-tooltip-${this.playerId}`);\n  }\n\n  // On arrow key press, navigate to next or prev Annotation\n  handleArrowKeys(e) {\n    if (!this.plugin.active) return;\n    const keyId = e.which;\n\n    if (keyId == 37) this.plugin.annotationState.prevAnnotation();\n    if (keyId == 39) this.plugin.annotationState.nextAnnotation();\n  }\n\n  // Adds help text to cursor during annotation mode\n  bindCursorTooltip() {\n    this.tooltipArea = Utils.areaOfHiddenEl(\n      this.$tooltip,\n      this.$UI.coverCanvas,\n      this.UI_CLASSES.hidden\n    );\n\n    // Assert bounds are updated in plugin in case page was modified since creation, so tooltip math is correct\n    this.plugin.setBounds(false);\n    $(document).on(\n      `mousemove.vac-tooltip-${this.playerId}`,\n      Utils.throttle((event) => {\n        if (!this.plugin.bounds) return;\n\n        const x = event.pageX;\n        const y = event.pageY;\n        const outOfBounds =\n          x < this.plugin.bounds.left ||\n          x > this.plugin.bounds.right ||\n          y < this.plugin.bounds.top ||\n          y > this.plugin.bounds.bottom;\n        const withinControls = !outOfBounds && y >= this.plugin.bounds.bottomWithoutControls;\n        const markerHovered = this.$tooltip.hasClass('vac-marker-hover');\n\n        if (outOfBounds) {\n          this.$tooltip.addClass(this.UI_CLASSES.hidden);\n          return;\n        }\n\n        const cursorX = x - this.plugin.bounds.left;\n        const cursorY = y - this.plugin.bounds.top;\n        const margin = 10;\n        const rightEdge = this.$player.width();\n        const bottomEdge = this.$player.height() - this.$UI.controlBar.height();\n        const atRightEdge = cursorX + this.tooltipArea.width + margin * 2 >= rightEdge;\n        const atBottomEdge = cursorY + this.tooltipArea.height + margin * 2 >= bottomEdge;\n\n        // is the tooltip too close to the right or bottom edge?\n        const posX = atRightEdge ? rightEdge - this.tooltipArea.width - margin : cursorX + margin;\n        const posY = atBottomEdge\n          ? bottomEdge - this.tooltipArea.height - margin\n          : cursorY + margin;\n\n        // hide if the cursor is over the control bar but not hovering over the draggable marker\n        // also hide if mouse is down\n        if ((withinControls && !markerHovered) || this.$tooltip.hasClass('vac-cursor-dragging')) {\n          this.$tooltip.addClass(this.UI_CLASSES.hidden);\n        } else {\n          this.$tooltip.removeClass(this.UI_CLASSES.hidden);\n        }\n\n        this.$tooltip.css({\n          left: `${posX}px`,\n          top: `${posY}px`\n        });\n      }, 50)\n    );\n  }\n\n  get $tooltip() {\n    this.$tooltip_ = this.$tooltip_ || this.$player.find('.vac-cursor-tool-tip');\n    return this.$tooltip_;\n  }\n};\n",
    "/*\n    Component for a timeline marker that is draggable when user clicks/drags on it, and rebuilds underlying range\n    as drag occurs\n*/\n\nconst Marker = require('./marker');\nconst Utils = require('./../lib/utils');\n\nconst markerTemplateName = 'draggable_marker';\n\nmodule.exports = class DraggableMarker extends Marker {\n  constructor(player, range) {\n    super(player, range);\n    this.range = range; // NOTE - this shouldn't be required and is a HACK for how transpilation works in IE10\n    this.templateName = markerTemplateName; // Change template from base Marker template\n    this.dragging = false; // Is a drag action currently occring?\n    this.rangePin = range.start; // What's the original pinned timeline point when marker was added\n    this.render();\n    this.$parent = this.$UI.markerWrap; // Set parent as marker wrap\n  }\n\n  // Bind needed evnets for UI interaction\n  bindMarkerEvents() {\n    // On mouse down init drag\n    this.$el.on('mousedown.vac-marker', e => {\n      e.preventDefault();\n      this.dragging = true;\n      // When mouse moves (with mouse down) call onDrag, throttling to once each 250 ms\n      $(document).on(\n        `mousemove.vac-dmarker-${this.playerId}`,\n        Utils.throttle(this.onDrag.bind(this), 250)\n      );\n\n      // Add drag class to cursor tooltip if available\n      if (!this.plugin.options.showControls) {\n        this.$player\n          .find('.vac-cursor-tool-tip')\n          .addClass('vac-cursor-dragging')\n          .removeClass('vac-marker-hover');\n      }\n    });\n\n    // On mouse up end drag action and unbind mousemove event\n    $(document).on(`mouseup.vac-dmarker-${this.playerId}`, e => {\n      if (!this.dragging) return;\n      $(document).off(`mousemove.vac-dmarker-${this.playerId}`);\n      this.dragging = false;\n\n      // Remove drag class and hover class from cursor tooltip if available\n      if (!this.plugin.options.showControls) {\n        this.$player\n          .find('.vac-cursor-tool-tip')\n          .removeClass('vac-cursor-dragging')\n          .removeClass('vac-marker-hover');\n      }\n    });\n\n    // On mouse mouse enter, show cursor tooltip if controls are not shown\n    // This adds the class which is picked up in Controls\n    if (!this.plugin.options.showControls) {\n      const self = this;\n      self.$el\n        .on('mouseenter.vac-cursor-tool-tip', () => {\n          self.$player.find('.vac-cursor-tool-tip').addClass('vac-marker-hover');\n        })\n        .on('mouseleave.vac-cursor-tool-tip', () => {\n          self.$player.find('.vac-cursor-tool-tip').removeClass('vac-marker-hover');\n        });\n    }\n  }\n\n  // On drag action, calculate new range and re-render marker\n  onDrag(e) {\n    const dragPercent = this.percentValFromXpos(e.pageX);\n    const secVal = parseInt(this.duration * dragPercent);\n\n    if (secVal > this.rangePin) {\n      this.range = {\n        start: this.rangePin,\n        end: secVal\n      };\n    } else {\n      this.range = {\n        start: secVal,\n        end: this.rangePin\n      };\n    }\n    this.render();\n    this.plugin.fire('addingAnnotationDataChanged', { range: this.range });\n  }\n\n  // Cal percentage (of video) position for a pixel-based X position on the document\n  percentValFromXpos(xpos) {\n    const x = Math.max(0, xpos - this.$parent.offset().left); // px val\n    const max = this.$parent.innerWidth();\n    let per = x / max;\n    if (per > 1) per = 1;\n    if (per < 0) per = 0;\n    return per;\n  }\n\n  // Remove bound events on destructon\n  teardown() {\n    $(document).off(`mousemove.vac-dmarker-${this.playerId} mouseup.vac-dmarker-${this.playerId}`);\n    this.$el.off('mouseenter.vac-cursor-tool-tip');\n    this.$el.off('mouseleave.vac-cursor-tool-tip');\n    this.$el.off('mousedown.vac-marker');\n    this.$el.remove();\n  }\n\n  // Move the video & marker start by some num seconds (pos or neg)\n  scrubStart(secondsChanged) {\n    const newStart = this.range.start + secondsChanged;\n    this.currentTime = newStart;\n    this.range.start = newStart;\n    this.rangePin = newStart;\n    this.teardown();\n    this.render();\n\n    this.plugin.fire('addingAnnotationDataChanged', { range: this.range });\n  }\n};\n",
    "/*\n    Component for a timeline marker with capabilities to render on timeline, including tooltip for comment\n*/\n\nconst PlayerUIComponent = require('./../lib/player_ui_component');\nconst Utils = require('./../lib/utils');\n\nconst markerTemplateName = 'marker';\nconst markerWrapTemplateName = 'marker_wrap';\n\nmodule.exports = class Marker extends PlayerUIComponent {\n  constructor(player, range, comment = null) {\n    super(player);\n    this.range = range;\n    this.comment = comment;\n    this.templateName = markerTemplateName;\n\n    if (!this.$UI.markerWrap.length) {\n      this.$UI.timeline.append(this.renderTemplate(markerWrapTemplateName));\n    }\n  }\n\n  // Set this marker as active (highlight) and optionally show tooltip also\n  setActive(showTooltip = false) {\n    this.$el.addClass(this.UI_CLASSES.active);\n    if (showTooltip) this.$el.addClass('vac-force-tooltip');\n  }\n\n  // Deactivate this marker\n  deactivate() {\n    this.$el.removeClass(`${this.UI_CLASSES.active} vac-force-tooltip`);\n  }\n\n  // Draw marker on timeline for this.range;\n  render() {\n    // clear existing marker if this one was already rendered\n    this.$UI.timeline.find(`[data-marker-id=\"${this.componentId}\"]`).remove();\n\n    // Bind to local instance var, add to DOM, and setup events\n    this.$el = $(this.renderTemplate(this.templateName, this.markerTemplateData));\n    this.$UI.markerWrap.append(this.$el);\n    this.bindMarkerEvents();\n  }\n\n  // Bind needed events for this marker\n  bindMarkerEvents() {\n    // handle dimming other markers + highlighting this one on mouseenter/leave\n    this.$el\n      .on('mouseenter.vac-marker', () => {\n        this.$el\n          .addClass('vac-hovering')\n          .closest('.vac-marker-wrap')\n          .addClass('vac-dim-all');\n      })\n      .on('mouseleave.vac-marker', () => {\n        this.$el\n          .removeClass('vac-hovering')\n          .closest('.vac-marker-wrap')\n          .removeClass('vac-dim-all');\n      });\n  }\n\n  // Build object for template\n  get markerTemplateData() {\n    // the smaller the width, the higher the z-index so overlaps are clickable\n    const left = (this.range.start / this.duration) * 100;\n    const width = (this.range.end / this.duration) * 100 - left;\n    const zIndex = 100 - Math.floor(width) || 100;\n    return {\n      left: `${left}%`,\n      width: `${width}%`,\n      zIndex,\n      showTooltip: this.plugin.options.showMarkerShapeAndTooltips,\n      tooltipRight: left > 50,\n      tooltipTime: Utils.humanTime(this.range),\n      tooltipBody: !this.comment ? null : this.comment.body,\n      rangeShow: !!this.range.end,\n      id: this.componentId\n    };\n  }\n\n  // Unbind event listeners on teardown and remove DOM nodes\n  teardown() {\n    this.$el\n      .off('mouseenter.vac-marker')\n      .off('mouseleave.vac-marker')\n      .off('click.vac-marker');\n    super.teardown();\n  }\n};\n",
    "/*\n    Component main 'annotation toggle' button in the player controls, including notifier for # annotations\n*/\n\nconst PlayerUIComponent = require('./../lib/player_ui_component');\n\nconst templateName = 'player_button';\n\nmodule.exports = class PlayerButton extends PlayerUIComponent {\n  constructor(player) {\n    super(player);\n    this.render();\n\n    this.initAPI(this, 'PlayerButton');\n\n    this.$el.on('click.vac-player-button', () => {\n      this.plugin.toggleAnnotationMode();\n    });\n  }\n\n  // Add button to player\n  render() {\n    const btn = this.player.getChild('controlBar').addChild('button', {});\n    btn.controlText('Toggle Animations');\n    this.$el = $(btn.el());\n    this.$el\n      .addClass('vac-player-btn')\n      .find('.vjs-icon-placeholder')\n      .html(this.renderTemplate(templateName));\n  }\n\n  // Update the number of annotations displayed in the bubble\n  updateNumAnnotations() {\n    const num = this.plugin.annotationState.annotations.length;\n    const $bubble = this.$el.find('b');\n    $bubble.text(num);\n    num > 0\n      ? $bubble.removeClass(this.UI_CLASSES.hidden)\n      : $bubble.addClass(this.UI_CLASSES.hidden);\n  }\n\n  // Unbind event listeners on teardown and remove DOM nodes\n  teardown() {\n    this.$el.off('click.vac-player-button');\n    super.teardown();\n  }\n};\n",
    "/*\n    Component for a shape that can be drug/sized on top of the video while adding a new annotation\n*/\n\nconst Shape = require('./shape');\nconst Utils = require('./../lib/utils');\n\nmodule.exports = class SelectableShape extends Shape {\n  constructor(player) {\n    super(player);\n    this.$parent = this.$player.find('.vac-video-cover-canvas');\n    this.bindEvents();\n    this.dragging = false;\n  }\n\n  // Bind all needed events for drag action\n  bindEvents() {\n    // On mousedown initialize drag\n    this.$parent.on('mousedown.vac-selectable-shape', e => {\n      // Check a few conditions to see if we should *not* start drag\n      if (!$(e.target).hasClass('vac-video-cover-canvas')) return; // didn't click on overlay\n      if ($(e.target).hasClass('vac-shape')) return; // user clicked on annotation\n\n      // Remove old shape if one existed\n      if (this.$el) this.$el.remove();\n\n      // Define default starting shape (just x/y coords of where user clicked no width/height yet)\n      const shape = {\n        x1: this.xCoordToPercent(e.pageX),\n        y1: this.YCoordToPercent(e.pageY)\n      };\n      shape.x2 = shape.x1;\n      shape.y2 = shape.y2;\n      this.shape = shape;\n\n      // Save origin points for future use\n      this.originX = shape.x1;\n      this.originY = shape.y1;\n\n      // Draw shape and start drag state\n      this.render();\n      this.dragging = true;\n      this.dragMoved = false; // used to determine if user actually dragged or just clicked\n\n      // Bind event on doc mousemove to track drag, throttled to once each 100ms\n      $(document).on(\n        `mousemove.vac-sshape-${this.playerId}`,\n        Utils.throttle(this.onDrag.bind(this), 100)\n      );\n\n      // Add drag class to cursor tooltip if available\n      if (!this.plugin.options.showControls) {\n        this.$player.find('.vac-cursor-tool-tip').addClass('vac-cursor-dragging');\n      }\n    });\n\n    // On mouseup, if during drag cancel drag event listeners\n    $(document).on(`mouseup.vac-sshape-${this.playerId}`, e => {\n      if (!this.dragging) return;\n\n      $(document).off(`mousemove.vac-sshape-${this.playerId}`);\n\n      if (!this.dragMoved) {\n        // clear shape if it's just a click (and not a drag)\n        this.shape = null;\n        if (this.$el) this.$el.remove();\n      }\n\n      this.dragging = false;\n\n      // Remove drag class from cursor tooltip if available\n      if (!this.plugin.options.showControls) {\n        this.$player.find('.vac-cursor-tool-tip').removeClass('vac-cursor-dragging');\n      }\n    });\n  }\n\n  // On each interation of drag action (mouse movement), recalc position and redraw shape\n  onDrag(e) {\n    this.dragMoved = true;\n\n    const xPer = this.xCoordToPercent(e.pageX);\n    const yPer = this.YCoordToPercent(e.pageY);\n\n    if (xPer < this.originX) {\n      this.shape.x2 = this.originX;\n      this.shape.x1 = Math.max(0, xPer);\n    } else {\n      this.shape.x2 = Math.min(100, xPer);\n      this.shape.x1 = this.originX;\n    }\n    if (yPer < this.originY) {\n      this.shape.y2 = this.originY;\n      this.shape.y1 = Math.max(0, yPer);\n    } else {\n      this.shape.y2 = Math.min(100, yPer);\n      this.shape.y1 = this.originY;\n    }\n    this.setDimsFromShape();\n\n    this.plugin.fire('addingAnnotationDataChanged', { shape: this.shape });\n  }\n\n  // Convert pixel-based x position (relative to document) to percentage in video\n  xCoordToPercent(x) {\n    x -= this.$parent.offset().left; // pixel position\n    const max = this.$parent.innerWidth();\n    return Number(((x / max) * 100).toFixed(2)); // round to 2 decimal places\n  }\n\n  // Convert pixel-based y position (relative to document) to percentage in video\n  YCoordToPercent(y) {\n    y -= this.$parent.offset().top; // pixel position\n    const max = this.$parent.innerHeight();\n    return Number(((y / max) * 100).toFixed(2)); // round to 2 decimal places\n  }\n\n  // Unbind events and remove element\n  teardown() {\n    this.$parent.off('mousedown.vac-selectable-shape');\n    $(document).off(`mouseup.vac-sshape-${this.playerId} mousemove.vac-sshape-${this.playerId}`);\n    super.teardown();\n  }\n};\n",
    "/*\n    Component for managing a shape (i.e. box drawn on the player) for an annotation\n*/\n\nconst PlayerUIComponent = require('./../lib/player_ui_component');\n\nmodule.exports = class Shape extends PlayerUIComponent {\n  constructor(player, shape = null) {\n    super(player);\n    this.shape = shape;\n    this.$parent = this.$player;\n  }\n\n  // Draw the shape element on the $parent\n  render() {\n    if (!this.shape) return;\n    if (this.$el) this.$el.remove();\n\n    this.$el = $('<div/>').addClass('vac-shape');\n    this.setDimsFromShape();\n    this.$parent.append(this.$el);\n  }\n\n  // Set/update the dimensions of the shape based  on this.shape\n  setDimsFromShape() {\n    this.$el.css({\n      left: `${this.shape.x1}%`,\n      top: `${this.shape.y1}%`,\n      width: `${this.shape.x2 - this.shape.x1}%`,\n      height: `${this.shape.y2 - this.shape.y1}%`\n    });\n  }\n};\n",
    "/*\n    Load plugin and register to global videojs\n*/\n\n(($, videojs) => {\n  const AnnotationComments = require('./annotation_comments.js');\n  videojs.registerPlugin('annotationComments', AnnotationComments(videojs));\n})(jQuery, window.videojs);\n",
    "/*\n    Classes for registering and handling custom events for external interaction support.\n    Will be bound to plugin object as a message gateway between external elements and the plugin.\n*/\n\nconst mitt = require('mitt');\nconst Logger = require('./logger');\n\n/*\n    A centralized collection of event callbacks organized by component and name\n    Main reference for external event api\n    These events will be bound to the plugin on initialization of their respective components\n    NOTE - 'self' as second param in each function is a workaround for transpiler not properly\n    keeping this , so we pass in instance to use as this for each fn - can't rely on bind\n    because this is rewritten from symbol registry in transpiler and it's not present\n*/\n\nconst EventRegistry = {\n  AnnotationState: {\n    openAnnotation: (event, _this) => {\n      _this.openAnnotationById(event.detail.id);\n    },\n    closeActiveAnnotation: (event, _this) => {\n      _this.clearActive();\n    },\n    newAnnotation: (event, _this) => {\n      _this.createAndAddAnnotation(event.detail);\n    },\n    destroyAnnotation: (event, _this) => {\n      _this.destroyAnnotationById(event.detail.id);\n    },\n    newComment: (event, _this) => {\n      const annotation = _this.findAnnotation(event.detail.annotationId);\n      if (annotation) annotation.commentList.createComment(event.detail.body);\n    },\n    destroyComment: (event, _this) => {\n      const comment = _this.findComment(event.detail.id);\n      if (comment) comment.commentList.destroyComment(event);\n    }\n  },\n  Controls: {\n    addingAnnotation: (event, _this) => {\n      _this.startAddNew();\n    },\n    cancelAddingAnnotation: (event, _this) => {\n      _this.cancelAddNew();\n    }\n  },\n  PlayerButton: {\n    onStateChanged: (event, _this) => {\n      _this.updateNumAnnotations();\n    }\n  },\n  AnnotationComments: {\n    toggleAnnotationMode: (event, _this) => {\n      _this.toggleAnnotationMode();\n    }\n  }\n};\n\nmodule.exports = class EventDispatcher {\n  constructor() {\n    this.pluginReady = false;\n    this.pendingEvts = [];\n    this.registeredListeners = [];\n    this.eventRegistry = EventRegistry;\n    this.eventEmitter = mitt();\n  }\n\n  // Use the EventRegistry to mass register events on each component initialization\n  registerListenersFor(obj, className) {\n    const matchingEvents = this.eventRegistry[className];\n    if (matchingEvents) {\n      Object.keys(matchingEvents).forEach(key => {\n        // Don't register again if already in cached collection\n        if (!~this.registeredListeners.indexOf(key)) {\n          const callback = matchingEvents[key].bind(obj);\n          this.registerListener(key, evt => {\n            if (!this.pluginReady) return;\n            this.logCallback(key, className, evt);\n            callback(evt, obj);\n          });\n        }\n      });\n    }\n  }\n\n  // Bind a listener\n  // Register internal listeners to make sure callbacks are not duped as modules are reloaded\n  // register = false for consumer usage with more flexibility\n  registerListener(type, callback, register = true) {\n    this.eventEmitter.on(type, callback);\n    if (register) this.registeredListeners.push(type);\n  }\n\n  // Unbind a listener\n  unregisterListener(type) {\n    this.eventEmitter.off(type);\n    const i = this.registeredListeners.indexOf(type);\n    this.registeredListeners.splice(i, 1);\n  }\n\n  // Trigger an event\n  fire(type, data) {\n    if (!this.pluginReady) return;\n    Logger.log('evt-dispatch-FIRE', type, data);\n    this.eventEmitter.emit(type, { detail: data });\n  }\n\n  teardown() {\n    this.registeredListeners.forEach(type => {\n      this.unregisterListener(type);\n    });\n  }\n\n  logCallback(eventName, className, event) {\n    Logger.log('evt-dispatch-RECEIVE', `${eventName} (${className})`, event);\n  }\n};\n",
    "/*\n\tGeneral logging library, checking to see if window.VAC_DEBUG is present and true to enable debugging\n*/\n\n// Prefix for appending to all logger messages\nconst LOG_PREFIX = '::VAC::';\n\n// Are we in debug mode?\nfunction debug() {\n  return !!window.VAC_DEBUG;\n}\n\n// Build arguments for console fn, adding prefix\nfunction buildArgs(args) {\n  return [LOG_PREFIX].concat(args);\n}\n\n// Log message/data\nmodule.exports.log = (...args) => {\n  if (!debug()) return;\n  console.log.apply(null, buildArgs(args));\n};\n\n// Error message/data\nmodule.exports.error = (...args) => {\n  if (!debug()) return;\n  console.error.apply(null, buildArgs(args));\n};\n\n// Info message/data\nmodule.exports.info = (...args) => {\n  if (!debug()) return;\n  console.info.apply(null, buildArgs(args));\n};\n",
    "/*\n    Base class all player components interit from - it includes lots of helper functions (to get reference to\n    the player, the plugin, video state, etc)\n*/\n\nmodule.exports = class PlayerComponent {\n  constructor(player) {\n    this._player = player;\n  }\n\n  // attribute to get reference to the main plugin object (main.js instance)\n  get plugin() {\n    return this.player.annotationComments();\n  }\n\n  // attribute to get player javascript instance\n  get player() {\n    return this._player;\n  }\n\n  // attribute to get video duration (in seconds)\n  get duration() {\n    return this.player.duration();\n  }\n\n  // attribute to get player current time\n  get currentTime() {\n    return this.player.currentTime();\n  }\n\n  // set current time of player\n  set currentTime(time) {\n    this.player.currentTime(time);\n  }\n\n  // Register all events in the EventRegistry matching this className\n  initAPI(obj, className) {\n    this.plugin.eventDispatcher.registerListenersFor(obj, className);\n  }\n\n  // Nullify player reference so objects can be removed safely\n  // All components should call super.teardown() within their teardown funcs\n  teardown(destroy = false) {\n    if (destroy) this._player = null;\n  }\n};\n",
    "/*\n    Base class all player UI components interit from - it includes lots of helper functions (to get reference to\n    the player $el, various classes/helpers, template rendering, etc)\n*/\n\nconst Handlebars = require('handlebars/runtime');\nconst PlayerComponent = require('./player_component');\nconst { templates } = require('../compiled/templates');\nconst Utils = require('./utils');\n\nmodule.exports = class PlayerUIComponent extends PlayerComponent {\n  // helpers to get various UI components of the player quickly, keeping commonly reused class names\n  // consolidated in case of need to change in the future (and for quick access)\n  get $UI() {\n    return Object.freeze({\n      commentsContainer: this.$player.find('.vac-comments-container'), // outer container for all comments\n      controlElements: this.$player.find('.vac-control'), // Each of multiple control elements in the control bar\n      newCommentTextarea: this.$player.find('.vac-video-write-new textarea'), // Textarea for writing a new comment\n      timeline: this.$player.find('.vjs-progress-control'), // Timeline element\n      markerCursorHelpText: this.$player.find('.vac-cursor-help-text'), // Help text that appears with 'click/drag..' on timeline\n      controlBar: this.$player.find('.vjs-control-bar'), // Conrol bar wrapper for vjs\n      markerWrap: this.$player.find('.vac-marker-wrap'), // wrapper element to place markers in on timeline\n      coverCanvas: this.$player.find('.vac-video-cover-canvas') // Player cover during adding annotation state\n    });\n  }\n\n  // utility classes used in various components\n  // eslint-disable-next-line class-methods-use-this\n  get UI_CLASSES() {\n    return Object.freeze({\n      hidden: 'vac-hidden',\n      active: 'vac-active'\n    });\n  }\n\n  // attribute to get player jquery element\n  get $player() {\n    return $(this.player.el());\n  }\n\n  // attribute to get player id from DOM\n  get playerId() {\n    return this.$player.attr('id');\n  }\n\n  // Generate a pseudo-guid ID for this component, to use as an ID in the DOM\n  get componentId() {\n    this.cid_ = this.cid_ || Utils.guid();\n    return this.cid_;\n  }\n\n  // Disable play/control actions on the current player\n  disablePlayingAndControl() {\n    this.$player.addClass('vac-disable-play');\n    // TODO - catch spacebar being hit\n    // TODO - prevent scrubbing and timeline click to seek\n  }\n\n  // Enable play/control actions on the controller\n  enablePlayingAndControl() {\n    this.$player.removeClass('vac-disable-play');\n  }\n\n  // Render a handlebars template with local data passed in via key/val in object\n  renderTemplate(templateName, options = {}) {\n    this.registerHandlebarsHelpers();\n    return templates[templateName](options);\n  }\n\n  // Handle escaped breaklines in Handlebars\n  // eslint-disable-next-line class-methods-use-this\n  registerHandlebarsHelpers() {\n    if ('breaklines' in Handlebars.helpers) return;\n\n    Handlebars.registerHelper('breaklines', (text) => {\n      text = Handlebars.Utils.escapeExpression(text);\n      text = text.replace(/(\\r\\n|\\n|\\r)/gm, '<br>');\n      return new Handlebars.SafeString(text);\n    });\n  }\n\n  // Provide basic teardown function to inherit\n  teardown() {\n    if (this.$el) this.$el.remove();\n    super.teardown();\n  }\n};\n",
    "/*\n    Collection of polyfills neededf or IE10+ support\n*/\n\n// Array.prototype.find() for IE10+\nrequire('ie-array-find-polyfill');\n// Object.assign for IE10+\nrequire('es6-object-assign').polyfill();\n\n// Allow use of object.constructor.staticFunc() in IE\n// Not yet supported by babel\n// https://gist.github.com/edoardocavazza/47246856759f2273e48b\n(function() {\n  if (\n    typeof Object.setPrototypeOf === 'undefined' &&\n    typeof Object.getOwnPropertyNames === 'function'\n  ) {\n    const _exclude = ['length', 'name', 'arguments', 'caller', 'prototype'];\n\n    function bindFunction(ctx, fn) {\n      return function() {\n        return fn.apply(this, arguments);\n      };\n    }\n\n    function bindProperty(ctx, prop, parentDescriptor) {\n      if (!parentDescriptor) {\n        const defaultValue = ctx.__proto__[prop];\n        parentDescriptor = {\n          get() {\n            return ctx[`__${prop}`] || defaultValue;\n          },\n          set(val) {\n            ctx[`__${prop}`] = val;\n          }\n        };\n      }\n      Object.defineProperty(ctx, prop, {\n        get: parentDescriptor.get ? parentDescriptor.get.bind(ctx) : undefined,\n        set: parentDescriptor.set ? parentDescriptor.set.bind(ctx) : undefined,\n        configurable: true\n      });\n    }\n\n    function iterateProps(subClass, superClass) {\n      const props = Object.getOwnPropertyNames(superClass);\n      let proto;\n\n      subClass.__proto__ = superClass;\n      for (let i = 0, len = props.length; i < len; i++) {\n        const prop = props[i];\n        if (prop === '__proto__') {\n          proto = superClass[prop];\n        } else if (_exclude.indexOf(i) === -1) {\n          const descriptor = Object.getOwnPropertyDescriptor(subClass, prop);\n          if (!descriptor) {\n            const superDescriptor = Object.getOwnPropertyDescriptor(superClass, prop);\n            if (\n              typeof superDescriptor.get !== 'function' &&\n              typeof superClass[prop] === 'function'\n            ) {\n              subClass[prop] = bindFunction(subClass, superClass[prop]);\n            } else if (typeof superDescriptor.get === 'function') {\n              bindProperty(subClass, prop, superDescriptor);\n            } else {\n              bindProperty(subClass, prop);\n            }\n          }\n        }\n      }\n      if (proto) {\n        iterateProps(subClass, proto);\n      }\n    }\n\n    Object.setPrototypeOf = iterateProps;\n  }\n})();\n\n// Use CustomEvent in IE\n(function() {\n  if (typeof window.CustomEvent === 'function') return false;\n\n  function CustomEvent(event, params) {\n    params = params || { bubbles: false, cancelable: false, detail: undefined };\n    const evt = document.createEvent('CustomEvent');\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n    return evt;\n  }\n\n  CustomEvent.prototype = window.Event.prototype;\n\n  window.CustomEvent = CustomEvent;\n})();\n",
    "/*\n    Geneal utility functions, sourced from underscore & scratch built as needed\n*/\n\nmodule.exports = {\n  // Clone an object\n  cloneObject: obj => ({ ...obj }),\n\n  // _throttle from underscore\n  throttle: (func, wait, options) => {\n    let context;\n    let args;\n    let result;\n    let timeout = null;\n    let previous = 0;\n    if (!options) options = {};\n    const later = function() {\n      previous = options.leading === false ? 0 : Date.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      const now = Date.now();\n      if (!previous && options.leading === false) previous = now;\n      const remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  },\n\n  // Parse all keys of an object to int\n  parseIntObj: obj => {\n    Object.keys(obj).forEach(key => {\n      if (parseInt(obj[key])) {\n        obj[key] = parseInt(obj[key]);\n      }\n    });\n    return obj;\n  },\n\n  // Convert a range {start: int, (optional) end: int} to human readable time\n  humanTime: range => {\n    function readable(sec) {\n      const mins = Math.floor(sec / 60);\n      const secs = String(sec % 60);\n      return `${mins}:${secs.length == 1 ? '0' : ''}${secs}`;\n    }\n    const time = [readable(range.start)];\n    if (range.end) time.push(readable(range.end));\n    return time.join('-');\n  },\n\n  // Pseduo-random guid generator\n  guid: () => {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n    }\n    return `${s4() + s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;\n  },\n\n  // Returns the height and width of an element that is not visible\n  // clones el and tricks DOM into rendering it w the correct size\n  // beware the container may be important for scoped styles\n  areaOfHiddenEl: ($el, $container, hideClass = '') => {\n    const $clone = $el.clone();\n    const data = {};\n    $clone.css({\n      visibility: 'hidden',\n      display: 'inline-block'\n    });\n    $clone.removeClass(hideClass);\n    $container.append($clone);\n    data.width = $clone.outerWidth();\n    data.height = $clone.outerHeight();\n    $clone.remove();\n\n    return data;\n  },\n\n  // Determine if a value (n) is within a range (start <= n <= end)\n  isWithinRange: (start, end, n) => {\n    end = end || start + 1; // for ranges with NO end defined, assume a 1s range\n    return n >= start && n <= end;\n  }\n};\n"
  ],
  "preExistingComment": "//# sourceMappingURL=data:application/json;charset=utf-8;base64,"
}
